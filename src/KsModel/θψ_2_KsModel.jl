# =============================================================
#		module: kunsatModel jesus
# =============================================================
module Œ∏œà_2_KsœàModel
	import ..cst, ..distribution, ..wrc, ..kunsat
	import QuadGK, Polynomials
	import SpecialFunctions: erfc, erfcinv
	
	export KSŒ®MODEL_START, KsŒ®MODEL_NOINTEGRAL, TORTUOSITY_CLAY

	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : KSŒ®MODEL_START
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		function KSŒ®MODEL_START(‚àëPsd, üéè_Clay, hydro, ipClass, iZ, ksmodelœÑ, option, param, Œ®‚ÇÅ; üéè_IsTopsoil=false, üéè_RockFragment=false, RockFragment=[], IsTopsoil=[])

			return KsŒ®model = KSMODEL_OPTIONS(‚àëPsd, üéè_Clay, üéè_RockFragment, hydro, ipClass, iZ, ksmodelœÑ, option, param, Œ®‚ÇÅ; RockFragment=RockFragment)

		end  # function: KS_MODEL
	#..................................................................


	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : KSMODEL_TRADITIONAL
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		function KSMODEL_TRADITIONAL(Se, T1, T1Mac, T2, T2Mac, T3, T3Mac, Œ∏r, Œ∏s, Œ∏sMacMat, œÉ, œÉMac, Œ®m, Œ®mMac)

			Kunsat_Mat = T1 * ((Œ∏sMacMat - Œ∏r) ^ T3) * ((cst.Y / Œ®m) / (exp( erfcinv(2.0 * Se) * œÉ * ‚àö2.0 )) ) ^ T2

			Kunsat_Mac = T1Mac * ((Œ∏s - Œ∏sMacMat) ^ T3Mac) * ((cst.Y / Œ®mMac) / ( exp( erfcinv(2.0 * Se) * œÉMac * ‚àö2.0))) ^ T2Mac 

		return Kunsat_Mat + Kunsat_Mac
		end  # function: KS_MODEL
	# ------------------------------------------------------------------
	

	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : KsŒ®MODEL_NOINTEGRAL
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		function KsŒ®MODEL_NOINTEGRAL(T1, T1Mac, T2, T2Mac, T3, T3Mac, Œ∏r, Œ∏s, Œ∏sMacMat, œÉ, œÉMac, Œ®‚ÇÅ::Float64, Œ®m, Œ®mMac)

			# Matrix ====	
				Œ∏_Mat = 0.5 * (Œ∏sMacMat - Œ∏r) * erfc((log( Œ®‚ÇÅ / Œ®m)) / (œÉ * ‚àö2.0)) + Œ∏r
				
				Se_Mat = (Œ∏_Mat- Œ∏r) / (Œ∏s - Œ∏r)
				
				KsMat = T1 * cst.KunsatModel * œÄ * ((Œ∏sMacMat - Œ∏r) * ((cst.Y / Œ®m) ^ T2) * exp(((T2 * œÉ) ^ 2.0) / 2.0)) ^ T3
				
				Kunsat_Mat = KsMat * ‚àöSe_Mat * (0.5 * erfc(((log(Œ®‚ÇÅ / Œ®m)) / œÉ + œÉ) / ‚àö2.0)) ^ 2.0
			
			# Macropore ===
				Œ∏_Mac = 0.5 * (Œ∏s - Œ∏sMacMat) * erfc((log(Œ®‚ÇÅ / Œ®mMac)) / (œÉMac * ‚àö2.0))
				
				Se_Mac = Œ∏_Mac / (Œ∏s - Œ∏r)

				KsMac = T1Mac * cst.KunsatModel * œÄ * ((Œ∏s - Œ∏sMacMat) * ((cst.Y / Œ®mMac) ^ T2Mac) * exp(((T2Mac * œÉMac) ^ 2.0) / 2.0)) ^ T3Mac

				Kunsat_Mac = KsMac * ‚àöSe_Mac * (0.5 * erfc(((log(Œ®‚ÇÅ / Œ®mMac)) / œÉMac + œÉMac) / ‚àö2.0)) ^ 2.0
		return Kunsat_Mat + Kunsat_Mac
		end  # function: KsŒ®MODEL_NOINTEGRAL
	# ------------------------------------------------------------------


	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : KsŒ®MODEL_CLAY
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		function KsŒ®MODEL_CLAY(hydro, iZ::Int64, option‚Çò, T1, T1Mac, T2, T2Mac, T3, T3Mac, Tclay, Œ∏r, Œ∏s, Œ∏sMacMat, œÉ, œÉMac, Œ®‚ÇÅ::Float64, Œ®m, Œ®mMac)

			# Se ===
				Se = wrc.Œ®_2_Se(option‚Çò, Œ®‚ÇÅ, iZ, hydro)

			# Matrix ====	
				KsMat = T1 * cst.KunsatModel * œÄ * (((Œ∏sMacMat - Œ∏r) ^ (Tclay / T3)) * ((cst.Y / Œ®m) ^ T2) * exp(((T2 * œÉ) ^ 2.0) / 2.0)) ^ T3

				Kunsat_Mat = KsMat * ‚àöSe * (0.5 * erfc(((log(Œ®‚ÇÅ / Œ®m)) / œÉ + œÉ) / ‚àö2.0)) ^ 2.0

			# Macropore ===
				KsMac = T1Mac * cst.KunsatModel * œÄ * ((Œ∏s - Œ∏sMacMat) * ((cst.Y / Œ®mMac) ^ T2Mac) * exp(((T2Mac * œÉMac) ^ 2.0) / 2.0)) ^ T3Mac

				Kunsat_Mac = KsMac * ‚àöSe * (0.5 * erfc(((log(Œ®‚ÇÅ / Œ®mMac)) / œÉMac + œÉMac) / ‚àö2.0)) ^ 2.0

	return  Kunsat_Mat + Kunsat_Mac
	end  # function: KsŒ®MODEL_CLAY
	# ------------------------------------------------------------------

	# ^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^__^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^__^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_^_

	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : TORTUOSITYMODELS
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		function KSMODEL_OPTIONS(‚àëPsd, üéè_Clay::Bool, üéè_RockFragment::Bool, hydro, ipClass, iZ::Int64, ksmodelœÑ, option, param, Œ®‚ÇÅ; RockFragment=[], Œ∏s=hydro.Œ∏s[iZ], Œ∏r=hydro.Œ∏r[iZ], Œ®m=hydro.Œ®m[iZ], œÉ=hydro.œÉ[iZ], Œ∏sMacMat=hydro.Œ∏sMacMat[iZ], Œ®mMac=hydro.Œ®mMac[iZ], œÉMac=hydro.œÉMac[iZ], œÑ‚ÇÅ‚Çê=ksmodelœÑ.œÑ‚ÇÅ‚Çê[ipClass],œÑclay‚ÇÄ=ksmodelœÑ.œÑclay‚ÇÄ[ipClass], œÑ‚ÇÇ‚Çê=ksmodelœÑ.œÑ‚ÇÇ‚Çê[ipClass], œÑclay‚Çò‚Çê‚Çì=ksmodelœÑ.œÑclay‚Çò‚Çê‚Çì[ipClass], œÑ‚ÇÉ‚Çê=ksmodelœÑ.œÑ‚ÇÉ‚Çê[ipClass], œÑclayŒîŒ∏sr=ksmodelœÑ.œÑclayŒîŒ∏sr[ipClass], œÑ‚ÇÅ‚ÇêMac=ksmodelœÑ.œÑ‚ÇÅ‚ÇêMac[ipClass],œÑclay‚ÇÄMac=ksmodelœÑ.œÑclay‚ÇÄMac[ipClass], œÑ‚ÇÇ‚ÇêMac=ksmodelœÑ.œÑ‚ÇÇ‚ÇêMac[ipClass], œÑclay‚Çò‚Çê‚ÇìMac=ksmodelœÑ.œÑclay‚Çò‚Çê‚ÇìMac[ipClass], œÑ‚ÇÉ‚ÇêMac=ksmodelœÑ.œÑ‚ÇÉ‚ÇêMac[ipClass], œÑclayŒîŒ∏srMac=ksmodelœÑ.œÑclayŒîŒ∏srMac)

			# Only correct if RF > Rf_StartIncrease
			if üéè_RockFragment
				Œ∏r, Œ∏s, Œ∏sMacMat = ROCKCORRECTION!(hydro, iZ, RockFragment[iZ], Œ∏r, Œ∏s, Œ∏sMacMat)
			end #@isdefined RockFragment


			# MODEL 0 ====
			# Original model	
			if option.ksModel.K‚ÇõModel‚ç∞=="KsŒ®model_0" # ===
				T2_Max = 2.0

				# Transforming matrix
					T1 =  10.0 ^ (œÑ‚ÇÅ‚Çê / (œÑ‚ÇÅ‚Çê - 1.0))
					T2 = T2_Max * (1.0 - œÑ‚ÇÇ‚Çê)
					T3 = 1.0 / (1.0 - œÑ‚ÇÉ‚Çê)

				# Transforming macro
					T1Mac = 10.0 ^ (œÑ‚ÇÅ‚ÇêMac / (1.0 - œÑ‚ÇÅ‚ÇêMac))
					T2Mac = T2_Max * (1.0 - œÑ‚ÇÇ‚ÇêMac)
					T3Mac = 1.0 / (1.0 - œÑ‚ÇÉ‚ÇêMac)	
		
				# Ks model
					K‚ÇõModel = cst.KunsatModel * QuadGK.quadgk(Se -> KSMODEL_TRADITIONAL(Se, T1, T1Mac, T2, T2Mac, T3, T3Mac, Œ∏r, Œ∏s, Œ∏sMacMat, œÉ, œÉMac, Œ®m, Œ®mMac), 0.0, 0.9999; rtol=1.0E-3)[1]

					return Kunsat = K‚ÇõModel * kunsat.KUNSAT_Œ∏Œ®Se(option.hydro, Œ®‚ÇÅ, iZ, hydro) / hydro.Ks[iZ]
				
			# MODEL 2 ====	
			# Rekationship between macro and matrix		
			elseif option.ksModel.K‚ÇõModel‚ç∞=="KsŒ®model_1" # ===	
				T2_Max = 3.0; T3_Max = 4.0
				# MATRIX 
					# Tortuosity T1
						T1 = 10.0 ^ (œÑ‚ÇÅ‚Çê / (œÑ‚ÇÅ‚Çê - 1.0))
						
					# Tortuosity T2
						T2 = T2_Max * (1.0 - œÑ‚ÇÇ‚Çê)

					# Tortuosity T3	
						T3 = T3_Max * (1.0 - œÑ‚ÇÉ‚Çê)			

				# MACRO
					# Tortuosity T1Mac
						T1Mac = 10.0 ^ (œÑ‚ÇÅ‚ÇêMac / (œÑ‚ÇÅ‚ÇêMac - 1.0))
					
					# Tortuosity T2Mac
						T2Mac = T2_Max * (1.0 - œÑ‚ÇÇ‚ÇêMac)
					
					# Tortuosity T3Mac
						T3Mac = T3_Max * (1.0 - œÑ‚ÇÉ‚ÇêMac)			 											
			return KsŒ®MODEL_NOINTEGRAL( T1, T1Mac, T2, T2Mac, T3, T3Mac, Œ∏r, Œ∏s, Œ∏sMacMat, œÉ, œÉMac, Œ®‚ÇÅ, Œ®m, Œ®mMac)
				
	
			# MODEL 2 ====	
			# Rekationship between macro and matrix
			elseif option.ksModel.K‚ÇõModel‚ç∞=="KsŒ®model_2"
				# CLAY FUNCTION
					# CLAY FUNCTION					
					Tclay = TORTUOSITY_CLAY(‚àëPsd, üéè_Clay, hydro, iZ, option, param, œÑclay‚ÇÄ, œÑclay‚Çò‚Çê‚Çì, œÑclayŒîŒ∏sr)
				
				# MATRIX 
						T2_Max = 3.0; T3_Max = 4.0
					# Tortuosity T1
						T1 =  10.0 ^ (œÑ‚ÇÅ‚Çê / (œÑ‚ÇÅ‚Çê - 1.0))
						# T1 = 10.0 ^ - (1.0 / (Tclay‚ÇÄ * œÑ‚ÇÅ‚Çê) -1.0)
						
					# Tortuosity T2
						T2 = T2_Max * (1.0 - œÑ‚ÇÇ‚Çê)

					# Tortuosity T3	
						T3 = T3_Max * (1.0 - œÑ‚ÇÉ‚Çê)

				# MACRO
					# Tortuosity T1Mac
						T1Mac = 10.0 ^ (œÑ‚ÇÅ‚ÇêMac / (œÑ‚ÇÅ‚ÇêMac - 1.0))
					
					# Tortuosity T2Mac
						T2Mac = T2_Max * (1.0 - œÑ‚ÇÇ‚ÇêMac)
					
					# Tortuosity T3Mac
						T3Mac = T3_Max * (1.0 - œÑ‚ÇÉ‚ÇêMac)
							
				return KsŒ®MODEL_CLAY(hydro, iZ, option.hydro, T1, T1Mac, T2, T2Mac, T3, T3Mac, Tclay, Œ∏r, Œ∏s, Œ∏sMacMat, œÉ, œÉMac, Œ®‚ÇÅ, Œ®m, Œ®mMac)	
		
			
			# MODEL 3 ====	
			# Rekationship between macro and matrix
			elseif option.ksModel.K‚ÇõModel‚ç∞=="KsŒ®model_3"
				# CLAY FUNCTION					
					Tclay = TORTUOSITY_CLAY(‚àëPsd, üéè_Clay, hydro, iZ, option, param, œÑclay‚ÇÄ, œÑclay‚Çò‚Çê‚Çì, œÑclayŒîŒ∏sr)
						
				# MATRIX ----------------------------
						T2_Max = 3.0; T3_Max = 4.0
						
					# Tortuosity T1
						T1 =  10.0 ^ (œÑ‚ÇÅ‚Çê / (œÑ‚ÇÅ‚Çê - 1.0))
						
					# Tortuosity T2
						T2 = T2_Max * (1.0 - œÑ‚ÇÇ‚Çê)

					# Tortuosity T3	
						T3 = T3_Max * (1.0 - œÑ‚ÇÉ‚Çê)

				# MACRO ----------------------------
					# Tortuosity T1Mac
						T1Mac = 10.0 ^ (œÑ‚ÇÅ‚Çê / (œÑ‚ÇÅ‚Çê - 1.0))
					
					# Tortuosity T2Mac
						T2Mac = T2_Max * (1.0 - œÑ‚ÇÇ‚ÇêMac)
					
					# Tortuosity T3Mac
						T3Mac = T3_Max * (1.0 - œÑ‚ÇÉ‚ÇêMac)
						
				return KsŒ®MODEL_CLAY(hydro, iZ, option.hydro, T1, T1Mac, T2, T2Mac, T3, T3Mac, Tclay, Œ∏r, Œ∏s, Œ∏sMacMat, œÉ, œÉMac, Œ®‚ÇÅ, Œ®m, Œ®mMac)	
			
			# Model 3Unimodal	
			elseif option.ksModel.K‚ÇõModel‚ç∞=="KsŒ®model_3Unimodal"
				# CLAY FUNCTION
					# CLAY FUNCTION					
					Tclay = TORTUOSITY_CLAY(‚àëPsd, üéè_Clay, hydro, iZ, option, param, œÑclay‚ÇÄ, œÑclay‚Çò‚Çê‚Çì, œÑclayŒîŒ∏sr)
						
				# MATRIX 
						T2_Max = 3.0; T3_Max = 3.0
					# Tortuosity T1
						T1 = 10.0 ^ (œÑ‚ÇÅ‚Çê / (œÑ‚ÇÅ‚Çê - 1.0))

						# T1 = 10.0 ^ - (1.0 / (Tclay‚ÇÄ * œÑ‚ÇÅ‚Çê) -1.0)
						
					# Tortuosity T2
						T2 = T2_Max * (1.0 - œÑ‚ÇÇ‚Çê)

					# Tortuosity T3	
						T3 = T3_Max * (1.0 - œÑ‚ÇÉ‚Çê)

				# MACRO
					# Tortuosity T1Mac
						œÑ‚ÇÅ‚ÇêMac = 0.0
						T1Mac = 10.0 ^ (œÑ‚ÇÅ‚ÇêMac / (œÑ‚ÇÅ‚ÇêMac - 1.0))
					
					# Tortuosity T2Mac
						œÑ‚ÇÇ‚ÇêMac = 0.0
						T2Mac = T2_Max * (1.0 - œÑ‚ÇÇ‚ÇêMac) 
					
					# Tortuosity T3Mac
						œÑ‚ÇÉ‚ÇêMac = 0.0
						T3Mac = T3_Max * (1.0 - œÑ‚ÇÉ‚ÇêMac)
							
				return KsŒ®MODEL_CLAY(hydro, iZ, option.hydro, T1, T1Mac, T2, T2Mac, T3, T3Mac, Tclay, Œ∏r, Œ∏s, Œ∏sMacMat, œÉ, œÉMac, Œ®‚ÇÅ, Œ®m, Œ®mMac)	
				
			else
				error("option.ksModel.K‚ÇõModel‚ç∞ = $(option.ksModel.K‚ÇõModel‚ç∞) is not yet implemented try <KsModel_Traditional>; <KsModel_TœÉ>; <KsModel_New>; <KsModel_NewSimplified> ")
				
			end  # if: Model=="Model?"
		end  # function: TORTUOSITYMODELS 


	# =====================================================================================================================
	# =====================================================================================================================

	
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : TORTUOSITY_CLAY
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		function TORTUOSITY_CLAY(‚àëPsd, üéè_Clay, hydro, iZ, option, param, œÑclay‚ÇÄ, œÑclay‚Çò‚Çê‚Çì, œÑclayŒîŒ∏sr)

			# If we have clay information derived from PSD
			if üéè_Clay
				Clay = ‚àëPsd[iZ,1]
			
			# Rough modelling % of clay [0-1]
			# Correlation between clay particle and Œ®
			else
				# Œ®_Clay =  160000.0 * ( ( (cst.Y  / 0.002) - (cst.Y / 0.5) ) / ((cst.Y  / 0.001) - (cst.Y  / 0.5)) ) ^ 2.0
				Œ®_Clay = param.psd.imp.Œ®_Max * (((cst.Y / 0.002) - (cst.Y / 0.5) ) / ((cst.Y / 0.002) - (cst.Y / 0.5))) ^ param.psd.imp.Œª 

				Clay = wrc.Œ®_2_Se(option.hydro, Œ®_Clay, iZ, hydro)
			end # üéè_Clay
			
			X_Clay‚ÇÅ =  œÑclay‚ÇÄ

			Clay‚Çô = max(Clay - X_Clay‚ÇÅ, 0.0) / (1.0 - X_Clay‚ÇÅ)

			ŒîŒ∏sMacŒ∏r = hydro.Œ∏sMacMat[iZ] - hydro.Œ∏r[iZ]

			ŒîŒ∏sMacŒ∏r‚Çô =  max(ŒîŒ∏sMacŒ∏r - œÑclayŒîŒ∏sr , 0.0) / (1.0 - œÑclayŒîŒ∏sr)

			Tclay_Max =  1.0 + ŒîŒ∏sMacŒ∏r‚Çô * (œÑclay‚Çò‚Çê‚Çì - 1.0) 

		return Tclay = Tclay_Max - (Tclay_Max - 1.0) * cos(Clay‚Çô * œÄ * 0.5) 
		end				
	# ------------------------------------------------------------------

	
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : ROCKCORRECTION
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	""" The rock corection is already performed in Œ∏(Œ®) and therefore Ks is already corected. Nevertheles, the model is wrong for RF > Rf_StartIncrease as the Ks starts to increase again"""
		function ROCKCORRECTION!(hydro, iZ, RockFragment, Œ∏r, Œ∏s, Œ∏sMacMat; Rf_StartIncrease=0.4, Rf_EndIncrease=0.9, Œ∏s_Amplify=1.1)

			Rf‚ÇÅ = min(RockFragment, Rf_EndIncrease)

			if Rf‚ÇÅ > Rf_StartIncrease
				# X values
					X = [Rf_StartIncrease, Rf_EndIncrease]
				
				# Œ∏s ----
					Œ∏s_NoRf = Œ∏s / (1.0 - Rf‚ÇÅ)
					Y_Œ∏s = [ (1.0 - Rf_StartIncrease) * Œ∏s_NoRf, Œ∏s_Amplify * Œ∏s_NoRf]
					Fit_Œ∏s = Polynomials.fit(X, Y_Œ∏s, 1)
					# Œ∏s = max(min(Fit_Œ∏s(Rf‚ÇÅ), hydro.Œ∏s_Max[iZ]), hydro.Œ∏s_Min[iZ])
					Œ∏s = Fit_Œ∏s(Rf‚ÇÅ)

				# Œ∏r ----
					Œ∏r_NoRf = Œ∏r / (1.0 - Rf‚ÇÅ)
					Y_Œ∏r = [(1.0 - Rf_StartIncrease) * Œ∏r_NoRf, Œ∏r_NoRf]
					Fit_Œ∏r = Polynomials.fit(X, Y_Œ∏r, 1)
					Œ∏r = max(min(Fit_Œ∏r(Rf‚ÇÅ), hydro.Œ∏r_Max[iZ]), hydro.Œ∏r_Min[iZ])

				# Œ∏sMacMat ----
					Œ∏sMacMat_NoRf =  Œ∏sMacMat / (1.0 - Rf‚ÇÅ)
					Y_Œ∏sMacMat = [min((1.0 - Rf_StartIncrease) * Œ∏sMacMat_NoRf, Œ∏s), 0.7 * (Œ∏s - Œ∏r) + Œ∏r]
					Fit_Œ∏sMacMat = Polynomials.fit(X, Y_Œ∏sMacMat, 1)	
					Œ∏sMacMat = min(Fit_Œ∏sMacMat(Rf‚ÇÅ), Œ∏s)					
			end
		return Œ∏r, Œ∏s, Œ∏sMacMat
		end  # function: ROCKCORRECTION
	# ------------------------------------------------------------------

end  # module Œ∏œà_2_KsœàModel
