# =============================================================
#		module: startKsModel
# =============================================================

include("Œ∏œà_2_KsModel.jl")
include("Opt_KsModel.jl")

module startKsModel
	import ..kunsat, ..optKsModel, ..plot, ..stats, ..Œ∏œà_2_KsœàModel
	import Statistics
	export START_KSŒ®MODEL

	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : START_KSŒ®MODEL
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		function START_KSŒ®MODEL(hydro, K‚ÇõModel, ksmodelœÑ, NiZ, optim, optimKsmodel, option, param, path; IsTopsoil=[], RockFragment=[], Ks_Impermeable=[], ‚àëPsd=[])
				
			# NUMBER OF CLASSES
				ClassBool, ClassBool_All, N_Class = KSŒ®MODEL_CLASS(hydro, NiZ, option, param)

			# What data do we have for our analysis 
            üéè_Clay         = !isempty(‚àëPsd)
            üéè_IsTopsoil    = !isempty(IsTopsoil)
            üéè_RockFragment = !isempty(RockFragment) && option.run.RockCorection

			# Time now 
				Time_Start = time()

			# DERIVING OBSERVED K(Œ®‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê)
				KŒ®_Obs‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê = fill(0.0::Float64, NiZ)
				KŒ®_Sim‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê = fill(0.0::Float64, NiZ)
				for iZ=1:NiZ
					KŒ®_Obs‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê[iZ] = kunsat.Œ®_2_KUNSAT(option.hydro, 1000.0, iZ, hydro)
				end

			# PERFORM OPTIMISATION OF KsModel ====
			if sum(optimKsmodel.NparamOpt) ‚â• 1 && option.data.KŒ∏ && "Ks" ‚àà optim.ParamOpt # For security
				for ipClass=1:N_Class
					ClassBool_Select = ClassBool[1:NiZ, ipClass]

					if sum(ClassBool[1:NiZ, ipClass]) ‚â• 1 && optimKsmodel.NparamOpt[ipClass] ‚â• 1
						println("\n       === ipClass=$ipClass === \n")
						
						K‚ÇõModel = optKsModel.START_OPT_KŒ∏MODEL(‚àëPsd, üéè_Clay, ClassBool_Select, hydro, ipClass, K‚ÇõModel, ksmodelœÑ, NiZ, optim, optimKsmodel, option, param; üéè_IsTopsoil=üéè_IsTopsoil, üéè_RockFragment=üéè_RockFragment, RockFragment=RockFragment, IsTopsoil=IsTopsoil)

						# Computing KŒ®_Sim‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê
						for iZ=1:NiZ
							if ClassBool_Select[iZ]
								KŒ®_Sim‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê[iZ] = Œ∏œà_2_KsœàModel.KSŒ®MODEL_START(‚àëPsd, üéè_Clay, hydro, ipClass, iZ, ksmodelœÑ, option, param, 1000.0; üéè_IsTopsoil=üéè_IsTopsoil, üéè_RockFragment=üéè_RockFragment, RockFragment=RockFragment, IsTopsoil=IsTopsoil)
							end
						end

						ksmodelœÑ = STATISTICS_KSMODEL(ClassBool_Select, hydro, ipClass, K‚ÇõModel, ksmodelœÑ, KŒ®_Obs‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê, KŒ®_Sim‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê, optimKsmodel, option)

						# All data
						if option.ksModel.Class && option.ksModel.Plot_KsModel
							NameSim = "Class œÉ_" * string(ipClass)			
							plot.ksmodel.KSMODEL(K‚ÇõModel[ClassBool_Select], KŒ®_Obs‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê[ClassBool_Select], KŒ®_Sim‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê[ClassBool_Select], hydro.Ks[ClassBool_Select], NameSim, path.plotSoilwater.Plot_KsModel, hydro.Œ∏r[ClassBool_Select], hydro.Œ∏sMacMat[ClassBool_Select], hydro.œÉ[ClassBool_Select], option)
						end # if option.ksModel.Class && option.ksModel.Plot_KsModel
					else
						println("\n       === Skipping ipClass=$ipClass === \n")
					end # if optimKsmodel.NparamOpt[ipClass] ‚â• 1
				end # for ipClass=1:N_Class

				# Final statistic of all combined Ks data
				if option.ksModel.OptIndivSoil || option.ksModel.Class					
					ksmodelœÑ = STATISTICS_KSMODEL(ClassBool_All, hydro, 0, K‚ÇõModel, ksmodelœÑ, KŒ®_Obs‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê, KŒ®_Sim‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê, optimKsmodel, option)
				end

				# PLOTTING ALL SOILS
				if option.ksModel.Plot_KsModel && sum(optimKsmodel.NparamOpt) ‚â• 1
					NameSim = "All soils"
					plot.ksmodel.KSMODEL(K‚ÇõModel[1:NiZ], KŒ®_Obs‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê[1:NiZ], KŒ®_Sim‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê[1:NiZ], hydro.Ks[1:NiZ], NameSim, path.plotSoilwater.Plot_KsModel, hydro.Œ∏r[1:NiZ], hydro.Œ∏sMacMat[1:NiZ], hydro.œÉ[1:NiZ], option)

 					plot.ksmodel.KSMODEL_TCLAY( path.plotSoilwater.Plot_KsModel, option, ksmodelœÑ, 1)

					plot.ksmodel.KSMODEL_FUNCTIONS( path.plotSoilwater.Plot_KsModel, option, ksmodelœÑ, 1)

					plot.ksmodel.KSMODEL_RF( path.plotSoilwater.Plot_KsModel, hydro, option, ksmodelœÑ, 1)
				end

			# RUN K‚ÇõModel
			else # ``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
				for ipClass=1:N_Class
					ClassBool_Select = ClassBool[1:NiZ, ipClass]

					for iZ=1:NiZ
						if ClassBool_Select[iZ]
							K‚ÇõModel[iZ] = Œ∏œà_2_KsœàModel.KSŒ®MODEL_START(‚àëPsd, üéè_Clay, hydro, ipClass, iZ, ksmodelœÑ, option, param, 0.0; üéè_IsTopsoil=üéè_IsTopsoil,üéè_RockFragment=üéè_RockFragment, IsTopsoil=IsTopsoil, RockFragment=RockFragment)
							
							KŒ®_Sim‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê[iZ] = Œ∏œà_2_KsœàModel.KSŒ®MODEL_START(‚àëPsd, üéè_Clay, hydro, ipClass, iZ, ksmodelœÑ, option, param, 10_00.0;  üéè_IsTopsoil=üéè_IsTopsoil,üéè_RockFragment=üéè_RockFragment, IsTopsoil=IsTopsoil, RockFragment=RockFragment)
						end
					end # for ipClass=1:N_Class, 
				end #ifor ipClass=1:N_Class

				#Statistics
					ksmodelœÑ = STATISTICS_KSMODEL(ClassBool_All, hydro, 0, K‚ÇõModel, ksmodelœÑ, KŒ®_Obs‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê, KŒ®_Sim‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê, optimKsmodel, option)

				# PLOTTING ALL SOILS
				if option.ksModel.Plot_KsModel && sum(optimKsmodel.NparamOpt) ‚â• 1
					NameSim = "All soils"
					plot.ksmodel.KSMODEL(K‚ÇõModel[1:NiZ], KŒ®_Obs‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê[1:NiZ], KŒ®_Sim‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê[1:NiZ], hydro.Ks[1:NiZ], NameSim, path.plotSoilwater.Plot_KsModel, hydro.Œ∏r[1:NiZ], hydro.Œ∏s[1:NiZ], hydro.œÉ[1:NiZ], option)	
				end
			end  # if: optimKsmodel


			# CHECKING FOR CONSISTENCY
			for iZ=1:NiZ
				K‚ÇõModel[iZ] = max(min(K‚ÇõModel[iZ], hydro.Ks_Max[iZ]), hydro.Ks_Min[iZ])

				if option.run.Smap
					# Special cases for impermeable layers
					if Ks_Impermeable[iZ] ‚â• 0.0
						K‚ÇõModel[iZ] = Ks_Impermeable[iZ]
					end
				end

				if "Ks" ‚àâ optim.ParamOpt
					hydro.Ks[iZ] = K‚ÇõModel[iZ]
				end #  hydro.Ks[iZ] < eps(100.0)
			end

		
			Time_End = time()

			println("		~~~~~~~~~~ Time of simulations $(floor(Time_End-Time_Start)) Seconds")

		return hydro, K‚ÇõModel, N_Class
		end  # function: START_KSŒ®MODEL
	#..................................................................


	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : KSŒ®MODEL_CLASS 
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		function KSŒ®MODEL_CLASS(hydro, NiZ, option, param)
			ClassBool_All = fill(true::Bool, NiZ)

			if option.ksModel.OptIndivSoil
				N_Class = NiZ 
				ClassBool = fill(false::Bool, NiZ, N_Class)
				for iZ=1:NiZ
					ClassBool[iZ, iZ] = true
				end

			elseif option.ksModel.Class
				N_Class = length(param.ksModel.œÉ‚Çõ‚Çö‚Çó·µ¢‚Çú) - 1
				ClassBool = fill(false::Bool, NiZ, N_Class)

				for ipClass=1:N_Class, iZ=1:NiZ
					œÉ_Min = param.ksModel.œÉ‚Çõ‚Çö‚Çó·µ¢‚Çú[ipClass]
					œÉ_Max = param.ksModel.œÉ‚Çõ‚Çö‚Çó·µ¢‚Çú[ipClass+1] 

					if œÉ_Min ‚â§ hydro.œÉ[iZ] < œÉ_Max
						ClassBool[iZ, ipClass] = true
					end
				end
			else
				N_Class = 1
				ClassBool = fill(true::Bool, NiZ, N_Class) 
			end
				
		return ClassBool, ClassBool_All, N_Class
		end  # function: SELECTION
	# ------------------------------------------------------------------

		

	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : STATISTICS_KSMODEL
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		function STATISTICS_KSMODEL(ClassBool, hydro, ipClass, K‚ÇõModel, ksmodelœÑ, KŒ®_Obs‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê, KŒ®_Sim‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê, optimKsmodel, option)
	
			# STATISTICS
				# For observed and simulated Ks
               Nse_œÑ‚ÇÄ    = stats.NSE(log10.(hydro.Ks[ClassBool]) , log10.(K‚ÇõModel[ClassBool]))
               Rmse_œÑ‚ÇÄ   = stats.RMSE(log10.(hydro.Ks[ClassBool]) , log10.(K‚ÇõModel[ClassBool]))
               œÉ_œÑ‚ÇÄ      = Statistics.std(log10.(hydro.Ks[ClassBool]) .- log10.(K‚ÇõModel[ClassBool]))
               Wilmot_œÑ‚ÇÄ = stats.NSE_WILMOT(log.(hydro.Ks[ClassBool]) , log.(K‚ÇõModel[ClassBool]))
               Ccc_œÑ‚ÇÄ    = stats.stats.NSE_CONCORDANCE_CORELATION_COEFICIENT(log.(hydro.Ks[ClassBool]), log.(K‚ÇõModel[ClassBool]))

				# For observed and simulated K(Œ®‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê)
               Nse_KŒ®‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê    = stats.NSE(log.(KŒ®_Obs‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê[ClassBool]) , log.(KŒ®_Sim‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê[ClassBool]))
               Rmse_KŒ®‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê   = stats.RMSE(log10.(KŒ®_Obs‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê[ClassBool]) , log10.(KŒ®_Sim‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê[ClassBool]))
               œÉ_KŒ®‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê      = Statistics.std(log10.(KŒ®_Sim‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê[ClassBool]).-log10.(KŒ®_Obs‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê[ClassBool]))
               Wilmot_KŒ®‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê = stats.NSE_WILMOT(log.(KŒ®_Obs‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê[ClassBool]) , log.(KŒ®_Sim‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê[ClassBool]))
               Ccc_KŒ®‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê    = stats.stats.NSE_CONCORDANCE_CORELATION_COEFICIENT(log.(KŒ®_Obs‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê[ClassBool]) , log.(KŒ®_Sim‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê[ClassBool]))

				if ipClass == 0
					println("\n       === Statistics all data === \n")
				end

			# PRINING RESULTS
				if option.data.KŒ∏
               println("		 Nse_œÑ          = $(Nse_œÑ‚ÇÄ)")
               println("		 Rmse_œÑ         = $(Rmse_œÑ‚ÇÄ)")
               println("		 œÉ_œÑ‚ÇÄ           = $(œÉ_œÑ‚ÇÄ)")
               println("		 Wilmot_œÑ       = $(Wilmot_œÑ‚ÇÄ)")
               println("		 Ccc_œÑ          = $(Ccc_œÑ‚ÇÄ) \n")

               println("		 Nse_KŒ®‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê    = $(Nse_KŒ®‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê)")
               println("		 Rmse_KŒ®‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê   = $(Rmse_KŒ®‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê)")
               println("		 œÉ_KŒ®‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê      = $(œÉ_KŒ®‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê)")
               println("		 Wilmot_KŒ®‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê = $(Wilmot_KŒ®‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê)")
               println("		 Ccc_KŒ®‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê    = $(Ccc_KŒ®‚ÇÅ‚ÇÄ‚Çñ‚Çö‚Çê) \n")
				end
				
			if ipClass > 0
				for iParam = 1:optimKsmodel.NparamOpt[ipClass]	
					# Getting the current values of every layer of the hydro parameter of interest
						vectParam = getfield(ksmodelœÑ, Symbol(optimKsmodel.ParamOpt[ipClass, iParam]))
						println("		", Symbol(optimKsmodel.ParamOpt[ipClass, iParam]) , "=" ,vectParam[ipClass])
				end # for loop

				ksmodelœÑ.Nse_œÑ[ipClass]    = Nse_œÑ‚ÇÄ
				ksmodelœÑ.Rmse_œÑ[ipClass]   = Rmse_œÑ‚ÇÄ
				ksmodelœÑ.Wilmot_œÑ[ipClass] = Wilmot_œÑ‚ÇÄ
				ksmodelœÑ.Ccc_œÑ[ipClass]    = Ccc_œÑ‚ÇÄ
			end	
		return ksmodelœÑ
		end  # function: STATISTICS_KSMODEL
	# ------------------------------------------------------------------

end  # module: startKsModel
# =====================================================================