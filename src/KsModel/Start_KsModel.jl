# =============================================================
#		module: startKsModel
# =============================================================

include("Œ∏œà_2_KsModel.jl")
include("Opt_KsModel.jl")

module startKsModel
	import ..optKsModel, ..plot, ..stats, ..Œ∏œà_2_KsœàModel
	export START_KSŒ®MODEL

	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : START_KSŒ®MODEL
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		function START_KSŒ®MODEL(hydro, K‚ÇõModel, ksmodelœÑ, NiZ, optim, optimKsmodel, option, param, path; Flag_IsTopsoil=false, Flag_RockFragment=false, IsTopsoil=[], RockFragment=[], Ks_Impermeable=[])

			# NUMBER OF CLASSES
			ClassBool, ClassBool_All, N_Class = KSŒ®MODEL_CLASS(hydro, NiZ, option, param)

			# PERFORM OPTIMISATION OF KsModel ====
			if sum(optimKsmodel.NparamOpt) ‚â• 1 && option.data.KŒ∏ && "Ks" ‚àà optim.ParamOpt # For security
				for ipClass=1:N_Class

					if optimKsmodel.NparamOpt[ipClass] ‚â• 1

						println("\n       === ipClass=$ipClass === \n")
						ClassBool_Select = ClassBool[1:NiZ, ipClass]

						K‚ÇõModel = optKsModel.START_OPT_KŒ∏MODEL(ClassBool_Select, hydro, ipClass, K‚ÇõModel, ksmodelœÑ, NiZ, optim, optimKsmodel, option, param)

						if !(option.ksModel.OptIndivSoil)
							ksmodelœÑ = STATISTICS_KSMODEL(ClassBool_Select, hydro, ipClass, K‚ÇõModel, ksmodelœÑ, optimKsmodel, option)
						end

						# All data
						if option.ksModel.Class && option.ksModel.Plot_KsModel
							NameSim = "Class œÉ_" * string(ipClass)
				
							plot.ksmodel.KSMODEL(K‚ÇõModel[ClassBool_Select], hydro.Ks[ClassBool_Select], NameSim,path.plotSoilwater.Plot_KsModel, hydro.Œ∏r[ClassBool_Select], hydro.Œ∏sMacMat[ClassBool_Select], hydro.œÉ[ClassBool_Select], option)
						end # if option.ksModel.Class && option.ksModel.Plot_KsModel
					end # if optimKsmodel.NparamOpt[ipClass] ‚â• 1
				end # for ipClass=1:N_Class


				if option.ksModel.Class
					ksmodelœÑ = STATISTICS_KSMODEL(ClassBool_All, hydro, 0, K‚ÇõModel, ksmodelœÑ, optimKsmodel, option; üéèallClass=true)
				end

				# PLOTTING ALL SOILS
				if option.ksModel.Plot_KsModel
					NameSim = "All soils"
					plot.ksmodel.KSMODEL(K‚ÇõModel[1:NiZ], hydro.Ks[1:NiZ], NameSim, path.plotSoilwater.Plot_KsModel, hydro.Œ∏r[1:NiZ], hydro.Œ∏sMacMat[1:NiZ], hydro.œÉ[1:NiZ], option)	
				end

			# RUN K‚ÇõModel
			else
				for ipClass=1:N_Class
					ClassBool_Select = ClassBool[1:NiZ, ipClass]

					for iZ=1:NiZ
						if ClassBool_Select[iZ]
							K‚ÇõModel[iZ] = Œ∏œà_2_KsœàModel.KSŒ®MODEL_START(hydro, ipClass, iZ, ksmodelœÑ, option, 0.0; Flag_IsTopsoil=false,Flag_RockFragment=false, IsTopsoil=[], RockFragment=[])
						end
					end # for ipClass=1:N_Class, 
				end #iZ=1:NiZ

				#Statistics
					ksmodelœÑ = STATISTICS_KSMODEL(ClassBool_All, hydro, 0, K‚ÇõModel, ksmodelœÑ, optimKsmodel, option; üéèallClass=true)

				# PLOTTING ALL SOILS
				if option.ksModel.Plot_KsModel
					NameSim = "All soils"
					plot.ksmodel.KSMODEL(K‚ÇõModel[1:NiZ], hydro.Ks[1:NiZ], NameSim, path.plotSoilwater.Plot_KsModel, hydro.Œ∏r[1:NiZ], hydro.Œ∏sMacMat[1:NiZ], hydro.œÉ[1:NiZ], option)	
				end
			end  # if: optimKsmodel

			for iZ=1:NiZ
				if "Ks" ‚àâ optim.ParamOpt
					hydro.Ks[iZ] = K‚ÇõModel[iZ]

					# If wanting to assure that the feasible range is physical
					hydro.Ks[iZ] = max( min(hydro.Ks[iZ], hydro.Ks_Max[iZ]), hydro.Ks_Min[iZ])
				end #  hydro.Ks[iZ] < eps(100.0)
			end # if: hydro.Ks[iZ] > eps(10.0)


			# SMAP SPECIAL COORECTING FOR IMPERMEABLE LAYERS
				if option.run.Smap
					for iZ=1:NiZ
						if Ks_Impermeable[iZ] ‚â• 0.0
							K‚ÇõModel[iZ] = Ks_Impermeable[iZ]
						end
					end
				end
		
		return hydro, K‚ÇõModel, N_Class
		end  # function: START_KSŒ®MODEL
	#..................................................................


	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : KSŒ®MODEL_CLASS 
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		function KSŒ®MODEL_CLASS(hydro, NiZ, option, param)

			ClassBool_All = fill(true::Bool, NiZ)

			if option.ksModel.OptIndivSoil
				N_Class = NiZ 
				ClassBool = fill(false::Bool, NiZ, N_Class)
				for iZ=1:NiZ
					ClassBool[iZ, iZ] = true
				end

			elseif option.ksModel.Class
				N_Class = length(param.ksModel.œÉŒ∑‚Çõ‚Çö‚Çó·µ¢‚Çú) - 1
				ClassBool = fill(false::Bool, NiZ, N_Class)

				for ipClass=1:N_Class, iZ=1:NiZ
					œÉ_Min = param.ksModel.œÉŒ∑‚Çõ‚Çö‚Çó·µ¢‚Çú[ipClass] * (hydro.œÉ_Max[iZ] - hydro.œÉ_Min[iZ]) + hydro.œÉ_Min[iZ]
					œÉ_Max = param.ksModel.œÉŒ∑‚Çõ‚Çö‚Çó·µ¢‚Çú[ipClass+1] * (hydro.œÉ_Max[iZ] - hydro.œÉ_Min[iZ]) + hydro.œÉ_Min[iZ]

					if œÉ_Min ‚â§ hydro.œÉ[iZ] < œÉ_Max
						ClassBool[iZ, ipClass] = true
					end
				end
			else
				N_Class = 1
				ClassBool = fill(true::Bool, NiZ, N_Class) 
			end
				
		return ClassBool, ClassBool_All, N_Class
		end  # function: SELECTION
	# ------------------------------------------------------------------
		

	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : STATISTICS_KSMODEL
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		function STATISTICS_KSMODEL(ClassBool_Select, hydro, ipClass, K‚ÇõModel, ksmodelœÑ, optimKsmodel, option; üéèallClass=false)
			# STATISTICS
            Nse_œÑ‚ÇÄ    = stats.NSE(log1p.(hydro.Ks[ClassBool_Select]) , log1p.(K‚ÇõModel[ClassBool_Select]))
            Rmse_œÑ‚ÇÄ   = stats.RMSE(log1p.(hydro.Ks[ClassBool_Select]) , log1p.(K‚ÇõModel[ClassBool_Select]))
            Wilmot_œÑ‚ÇÄ = stats.NSE_WILMOT(log1p.(hydro.Ks[ClassBool_Select]) , log1p.(K‚ÇõModel[ClassBool_Select]))
            Ccc_œÑ‚ÇÄ    = stats.stats.NSE_CONCORDANCE_CORELATION_COEFICIENT(log1p.(hydro.Ks[ClassBool_Select]) , log1p.(K‚ÇõModel[ClassBool_Select]))

				if !(üéèallClass)
               ksmodelœÑ.Nse_œÑ[ipClass]    = Nse_œÑ‚ÇÄ
               ksmodelœÑ.Rmse_œÑ[ipClass]   = Rmse_œÑ‚ÇÄ
               ksmodelœÑ.Wilmot_œÑ[ipClass] = Wilmot_œÑ‚ÇÄ
               ksmodelœÑ.Ccc_œÑ[ipClass]    = Ccc_œÑ‚ÇÄ
				end  # if: !(üéèallClass)

				if üéèallClass
					println("\n       === Statistics all data === \n")
				end
			# PRINING RESULTS
				if hydro.Ks[1] > 1
					println("		 Nse_œÑ    =  $(Nse_œÑ‚ÇÄ)")
					println("		 Rmse_œÑ   =  $(Rmse_œÑ‚ÇÄ)")
					println("		 Wilmot_œÑ =  $(Wilmot_œÑ‚ÇÄ)")
					println("		 Ccc_œÑ    =  $(Ccc_œÑ‚ÇÄ) \n")
				end

				if !(üéèallClass)
				for iParam = 1:optimKsmodel.NparamOpt[ipClass]	
					# Getting the current values of every layer of the hydro parameter of interest
						vectParam = getfield(ksmodelœÑ, Symbol(optimKsmodel.ParamOpt[ipClass, iParam]))

						println("		", Symbol(optimKsmodel.ParamOpt[ipClass, iParam]) , "=" ,vectParam)
				end # for loop
				end # üéèallClass
			
		return ksmodelœÑ
		end  # function: STATISTICS_KSMODEL
	# ------------------------------------------------------------------

end  # module: startKsModel
# =====================================================================