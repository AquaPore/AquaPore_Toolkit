
# =============================================================
#		module: optIndivSoil
# =============================================================
module optIndivSoil
	import ..hydroRelation, ..ofHydrolab, ..optimize, ..psdThetar, ..optimizeOptim, ..kunsat
	using BlackBoxOptim
	using PRIMA, Optim
	export OPTIMIZE_INDIVIDUALSOILS

   global CountIndiv_NoImprovement = 1::Int64
   global CountIndiv_Opt           = 1::Int64
   global OfIndiv_Soil          = Inf ::Float64

	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : OPTIMIZE_INDIVIDUALSOILS
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	function OPTIMIZE_INDIVIDUALSOILS(;‚àëPsd, hydro, hydroOther::Main.hydroStruct.HYDRO_OTHER, K_KŒ®obs::Matrix{Float64}, N_KŒ®obs=1, N_Œ∏Œ®obs::Vector{Int64}, NiZ::Int64, optim::Main.reading.OPTIM, optimAllSoils, option::Main.options.OPTION, option‚Çò::Main.options.HYDRO, param::Main.params.PARAM, Œ∏_Œ∏Œ®obs::Matrix{Float64}, Œ∏œµ=0.005::Float64, Œ®_KŒ®obs::Matrix{Float64}, Œ®_Œ∏Œ®obs::Matrix{Float64})

		# Initiating arrays 
			Of_Sample = zeros(Float64, NiZ)

		# DETERMINE IF WE ARE HAVING A UNIMODAL OR BIMODAL
			if "Œ∏sMacMat" ‚àà optim.ParamOpt
				üéè_Bimodal = true
			else
				üéè_Bimodal = false
			end

		for iZ = 1:NiZ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			# TEST IF EXIST Œ® ‚âà 0  ~~~
				if minimum(Œ®_Œ∏Œ®obs[iZ, 1:N_Œ∏Œ®obs[iZ]]) < 0.01 
					üéèŒòŒ®_0 = true
				else
					üéèŒòŒ®_0 = false
				end

			# FEASIBLE RANGE OF Œ∏_Œ∏Œ®obs ~~~
				Œ∏obs_Min = minimum(Œ∏_Œ∏Œ®obs[iZ, 1:N_Œ∏Œ®obs[iZ]])  # Smallest measurement of Œ∏
				Œ∏obs_Max = maximum(Œ∏_Œ∏Œ®obs[iZ, 1:N_Œ∏Œ®obs[iZ]])  # Greatest measurement of Œ∏


			# CORRECTING Œ∏r  ~~~~~
				hydro.Œ∏r_Max[iZ] = max(min(max(Œ∏obs_Min - Œ∏œµ, 0.0), hydro.Œ∏r_Max[iZ]),  hydro.Œ∏r_Min[iZ] + Œ∏œµ) # Maximum value of Œ∏r

				if ("Œ∏r" ‚àà optim.ParamOpt)
					# Changing the feasible range of Œ∏r
					iŒ∏r = findfirst(isequal("Œ∏r"), optim.ParamOpt)[1]
					optim.ParamOpt_Max[iŒ∏r] = hydro.Œ∏r_Max[iZ]
				end

				if ("Œ∏r" ‚àâ optim.ParamOpt) && (option‚Çò.Œ∏rOpt‚ç∞=="ParamPsd") && (option.data.Psd) # Derive Œ∏r frpm PSD
					hydro.Œ∏r[iZ] = psdThetar.PSD_2_Œ∏r_FUNC(‚àëPsd, hydro, iZ, param)
					hydro.Œ∏r[iZ] = max(min(hydro.Œ∏r[iZ], hydro.Œ∏r_Max[iZ]), hydro.Œ∏r_Min[iZ])
				end # if ("Œ∏r" ‚àà optim.ParamOpt)

			# CORRECTING Œ∏s  ~~~~~
				if ("Œ∏s" ‚àà optim.ParamOpt)
					if üéèŒòŒ®_0
						hydro.Œ¶[iZ] = Œ∏obs_Max / param.hydro.Coeff_Œ¶_2_Œ∏s

						if üéè_Bimodal
							hydro.Œ∏s_Min[iZ] = Œ∏obs_Max * 0.9
							hydro.Œ∏s_Max[iZ] = Œ∏obs_Max * 1.1
						else
							hydro.Œ∏s_Min[iZ] = Œ∏obs_Max * 0.75
							hydro.Œ∏s_Max[iZ] = Œ∏obs_Max * 1.0
						end

					elseif !(üéèŒòŒ®_0) 
						hydro.Œ∏s_Min[iZ] = hydro.Œ¶[iZ] * 0.9
						hydro.Œ∏s_Max[iZ] = hydro.Œ¶[iZ] * 1.1

					end  # if: üéèŒòŒ®_0

					# Changing the feasible range of Œ∏s
						iŒ∏s = findfirst(isequal("Œ∏s"), optim.ParamOpt)[1]
						optim.ParamOpt_Min[iŒ∏s] = hydro.Œ∏s_Min[iZ]
						optim.ParamOpt_Max[iŒ∏s] = hydro.Œ∏s_Max[iZ]	

				elseif ("Œ∏s" ‚àâ optim.ParamOpt) # *****
					if üéèŒòŒ®_0
						hydro.Œ∏s[iZ] = Œ∏obs_Max
						hydro.Œ¶[iZ]  = hydro.Œ∏s[iZ] / param.hydro.Coeff_Œ¶_2_Œ∏s

					elseif !(üéèŒòŒ®_0)
						hydro.Œ∏s[iZ] = max(hydro.Œ¶[iZ] * param.hydro.Coeff_Œ¶_2_Œ∏s, Œ∏obs_Max + 0.0015)

					end
				end # if "Œ∏s"


			# ~~~~ TEST IF EXIST K(Œ®=0)  ~~~
				if option.data.KŒ∏
					if minimum(Œ®_KŒ®obs[iZ,1:N_KŒ®obs[iZ]]) <  0.001 
						üéè_Ks = true
					else
						üéè_Ks = false
					end
					
					K_KŒ®obs_Max = maximum(K_KŒ®obs[iZ, 1:N_KŒ®obs[iZ]])
				end # if option.data.KŒ∏

				if option.data.KŒ∏ && "Ks" ‚àà optim.ParamOpt				
					if üéè_Ks
						if üéè_Bimodal
							hydro.Ks_Min[iZ] = K_KŒ®obs_Max * 0.95
							hydro.Ks_Max[iZ] = K_KŒ®obs_Max  * 1.05
						else
							hydro.Ks_Min[iZ] = K_KŒ®obs_Max * 0.75
							hydro.Ks_Max[iZ] = K_KŒ®obs_Max  * 1.25
						end	
					else
						hydro.Ks_Min[iZ] = max(hydro.Ks_Min[iZ], K_KŒ®obs_Max)
						hydro.Ks_Max[iZ] = max(hydro.Ks_Max[iZ], 10.0 ^ (log10(K_KŒ®obs_Max) + 1.0))
					end # "Ks" ‚àà optim.ParamOpt

					# Modifying the searchrange
					iKs                     = findfirst(isequal("Ks"), optim.ParamOpt)[1]
					optim.ParamOpt_Min[iKs] = hydro.Ks_Min[iZ]
					optim.ParamOpt_Max[iKs] = hydro.Ks_Max[iZ]

				elseif option.data.KŒ∏ && "Ks" ‚àâ optim.ParamOpt && üéè_Ks
					hydro.Ks[iZ] = K_KŒ®obs_Max

				end # if option.data.KŒ∏ && "Ks" ‚àà optim.ParamOpt
			

			# OPTIMIZATION: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"""Arguments * optimizer initialized optimization method * evaluator the evaluator of the problem fitness * params controller settings, see DefaultParameters for the default values: 

:MaxTime max time in seconds (takes precedence over the other budget-related params if specified), 0.0 disables the check * :MaxFuncEvals max fitness evals (takes precedence over max iterations, but not max time), 0 disables the check * 

:MaxSteps max iterations gives the least control since different optimizers have different "size" of their "iterations" 

* :MaxStepsWithoutProgress max iterations without fitness improvement 

*:MinDeltaFitnessTolerance minimum delta fitness (difference between the two consecutive best fitness improvements) we can accept before terminating  


* :MaxNumStepsWithoutFuncEvals stop optimization if no new fitness evals in this many steps (indicates a converged/degenerate search) 

* :NumRepetitions number of repetitions to run for each optimizer for each problem 

* :TraceMode how the optimizer state is traced to the STDOUT during the optimization (one of :silent, :verbose) 

* :TraceInterval the trace interval (in seconds) 

* :SaveTrace whether to save it to a file (defaults to false) 

* :SaveFitnessTraceToCsv whether the history of fitness changes during optimization should be save to a csv file 

* :SaveParameters save method/controller parameters to a JSON file"""

			üéè_Model = :BlackBox # :Optim, :Prima, :BlackBox 
			
			if  üéè_Model == :BlackBox
				function FORCING_STOPPING_INDIV(oc; CountIndiv_NoImprovement_Max=2000)
					function WHEN_TO_STOP_INDIV(oc; CountIndiv_NoImprovement_Max=CountIndiv_NoImprovement_Max)
						global CountIndiv_Opt += 1

						if OfIndiv_Soil > BlackBoxOptim.best_fitness(oc)
							global CountIndiv_NoImprovement = 1
							global OfIndiv_Soil = BlackBoxOptim.best_fitness(oc)
						else
							global CountIndiv_NoImprovement += 1
						end

					return CountIndiv_NoImprovement > CountIndiv_NoImprovement_Max
					end# ===========

					if WHEN_TO_STOP_INDIV(oc)
						BlackBoxOptim.shutdown!(oc)
					end
				end
				
				# Updated searchrange
				SearchRange_IndivSoil = optimize.SEARCHRANGE(option‚Çò, optim)

            global CountIndiv_NoImprovement = 1::Int64
            global CountIndiv_Opt           = 1::Int64
            global OfIndiv_Soil             = Inf ::Float64

				if optimAllSoils.üéè_Opt
					Optimization = BlackBoxOptim.bboptimize(X -> optIndivSoil.OF_HYDROLAB(hydro, iZ, K_KŒ®obs, N_KŒ®obs, N_Œ∏Œ®obs, Of_Sample, optim, option, option‚Çò, param, X, Œ∏_Œ∏Œ®obs, Œ®_KŒ®obs, Œ®_Œ∏Œ®obs); SearchRange=SearchRange_IndivSoil, NumDimensions=optim.NparamOpt, TraceMode=:silent, CallbackFunction=FORCING_STOPPING_INDIV, CallbackInterval=0.0, MinDeltaFitnessTolerance=1e-9)
				else
					Optimization = BlackBoxOptim.bboptimize(X -> optIndivSoil.OF_HYDROLAB(hydro, iZ, K_KŒ®obs, N_KŒ®obs, N_Œ∏Œ®obs, Of_Sample, optim, option, option‚Çò, param, X, Œ∏_Œ∏Œ®obs, Œ®_KŒ®obs, Œ®_Œ∏Œ®obs); SearchRange=SearchRange_IndivSoil, NumDimensions=optim.NparamOpt, TraceMode=:silent)
				end
				# Best parameter set .
					X = BlackBoxOptim.best_candidate(Optimization)

			elseif üéè_Model == :Prima
				Lower, Upper = optimizeOptim.SEARCHRANGE_OPTIM(option‚Çò, optim)
				Initial = (Lower + Upper) .* 0.5

				rhobeg=2.5e-8
				rhobeg = max(0.25 * minimum(Upper .- Lower), rhobeg)
				rhoend=1.0e-16

				X, info = PRIMA.bobyqa(X -> optIndivSoil.OF_HYDROLAB(hydro, iZ, K_KŒ®obs, N_KŒ®obs, N_Œ∏Œ®obs, Of_Sample, optim, option, option‚Çò, param, X, Œ∏_Œ∏Œ®obs, Œ®_KŒ®obs, Œ®_Œ∏Œ®obs), Initial; xl=Lower, xu=Upper, rhobeg=rhobeg, rhoend=rhoend, maxfun=100000)

			elseif üéè_Model == :Optim
				Lower, Upper = optimizeOptim.SEARCHRANGE_OPTIM(option‚Çò, optim)
				Initial = (Lower + Upper) .* 0.5

				Result = Optim.optimize(X -> optIndivSoil.OF_HYDROLAB(hydro, iZ, K_KŒ®obs, N_KŒ®obs, N_Œ∏Œ®obs, Of_Sample, optim, option, option‚Çò, param, X, Œ∏_Œ∏Œ®obs, Œ®_KŒ®obs, Œ®_Œ∏Œ®obs), Lower, Upper, Initial, Fminbox(NelderMead()), Optim.Options(show_trace = false))

				X = Optim.minimizer(Result)
			end

			hydro = optIndivSoil.PARAM_2_hydro(hydro, iZ, optim, option‚Çò, param, X)

			# COMPUTING MACROPORE %
				if option‚Çò.HydroModel‚ç∞ == "Kosugi"
					Ta, Tb, Tc, TaMac, TbMac, TcMac = kunsat.kg.TORTUOSITY(; œÉ=hydro.œÉ[iZ],  œÉ_Max=hydro.œÉ_Max[iZ], œÉ_Min=hydro.œÉ_Min[iZ], œÉMac=hydro.œÉMac[iZ], œÑa=hydro.œÑa[iZ], œÑaMac=hydro.œÑaMac[iZ], œÑb=hydro.œÑb[iZ], œÑ‚Çö=hydro.œÑ‚Çö[iZ], œÑbMac=hydro.œÑbMac[iZ], œÑc=hydro.œÑc[iZ], œÑcMac=hydro.œÑcMac[iZ])

					KsMac, KsMat= kunsat.kg.KS_MATMAC_Œ®macMat(option‚Çò.KosugiModel_Œ∏Œ®‚ç∞, hydro.Ks[iZ], option‚Çò.KosugiModel_KŒ®‚ç∞, Tb, TbMac, Tc, hydro.œÑ‚Çö[iZ], TcMac, hydro.Œ∏r[iZ], hydro.Œ∏s[iZ], hydro.Œ∏sMacMat[iZ], hydro.œÉ[iZ], hydro.œÉMac[iZ], hydro.Œ®m[iZ], hydro.Œ®macMat[iZ], hydro.Œ®mMac[iZ])

					hydroOther.Macro_Perc[iZ] = KsMac / hydro.Ks[iZ]
				end # option‚Çò.HydroModel‚ç∞ == "Kosugi"


				# STATISTICS
					if option.data.KŒ∏ && "Ks" ‚àà optim.ParamOpt
						Of_Sample, Of_Œ∏Œ®, Of_Kunsat = ofHydrolab.OF_WRC_KUNSAT(hydro, iZ, N_Œ∏Œ®obs, Of_Sample, optim, option‚Çò, Œ∏_Œ∏Œ®obs, Œ®_Œ∏Œ®obs; K_KŒ®obs=K_KŒ®obs, N_KŒ®obs=N_KŒ®obs, Œ®_KŒ®obs=Œ®_KŒ®obs)
					else
						Of_Sample, Of_Œ∏Œ®, Of_Kunsat = ofHydrolab.OF_WRC_KUNSAT(hydro, iZ, N_Œ∏Œ®obs, Of_Sample, optim, option‚Çò, Œ∏_Œ∏Œ®obs, Œ®_Œ∏Œ®obs)
					end  

					hydroOther.Rmse[iZ], hydroOther.Rmse_KŒ®[iZ], hydroOther.Rmse_Œ∏Œ®[iZ] = ofHydrolab.OF_RMSE(option, option‚Çò, iZ, Œ∏_Œ∏Œ®obs, Œ®_Œ∏Œ®obs, N_Œ∏Œ®obs, K_KŒ®obs, Œ®_KŒ®obs, N_KŒ®obs, hydro, optim)
		end # for iZ=1:NiZ
		
	return hydro, hydroOther, Of_Sample
	end  # function: OPTIMIZE_INDIVIDUALSOILS
	# ------------------------------------------------------------------


	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : OF_HYDROLAB
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		function OF_HYDROLAB(hydro, iZ, K_KŒ®obs, N_KŒ®obs, N_Œ∏Œ®obs, Of_Sample, optim, option, option‚Çò, param, X, Œ∏_Œ∏Œ®obs, Œ®_KŒ®obs, Œ®_Œ∏Œ®obs)

			# New optimized which are put into the matching veg or hydro parameters
				hydro = optIndivSoil.PARAM_2_hydro(hydro, iZ, optim, option‚Çò, param, X)
		
			# Weighted Objective Function
			if option.data.KŒ∏ && "Ks" ‚àà optim.ParamOpt
				Of_Sample, Of_Œ∏Œ®, Of_Kunsat = ofHydrolab.OF_WRC_KUNSAT(hydro, iZ, N_Œ∏Œ®obs, Of_Sample, optim, option‚Çò, Œ∏_Œ∏Œ®obs, Œ®_Œ∏Œ®obs; K_KŒ®obs=K_KŒ®obs, N_KŒ®obs=N_KŒ®obs, Œ®_KŒ®obs=Œ®_KŒ®obs)
			else
				Of_Sample, Of_Œ∏Œ®, Of_Kunsat = ofHydrolab.OF_WRC_KUNSAT(hydro, iZ, N_Œ∏Œ®obs, Of_Sample, optim, option‚Çò, Œ∏_Œ∏Œ®obs, Œ®_Œ∏Œ®obs)
			end 
		return Of_Sample[iZ]
		end  # function: OF_HYPIX
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : PARAM_2_hydro
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		function PARAM_2_hydro(hydro, iZ, optim, option‚Çò, param, X; ŒîMinŒò‚Çõ_Œò·µ£=0.05, üéè_CheckError=true)

			for iParam = 1:optim.NparamOpt	
				# Determening if parameters are Log transformed
					if (optim.ParamOpt_LogTransform[iParam]) && !(optim.ParamOpt[iParam]=="Œ®m" && option‚Çò.œÉ_2_Œ®m‚ç∞ == "Constrained")
						Param‚Çê = expm1(X[iParam])
					else
						Param‚Çê = X[iParam]
					end  # if: optim.ParamOpt_LogTransform

				# Getting the current values of every layer of the hydro parameter of interest
					vectParam = getfield(hydro, Symbol(optim.ParamOpt[iParam]))

				# Updating the value of the parameters for the soil wanting to optimize by keeping the values constant
					vectParam[iZ] = Param‚Çê

				# Putting the updated hydro into hydro
					setfield!(hydro, Symbol(optim.ParamOpt[iParam]), vectParam)
			end # for loop


			# ==================== SPECIAL CASES ====================

			# RELATIONSHIP BETWEEN Œ®macMat ‚û° œÉMac & Œ®mMac
				if option‚Çò.Œ®macMat_2_œÉMac_Œ®mMac

					# Œ®macMat‚ÇÅ = hydroRelation.FUNC_Œ∏sMacMatŒ∑_2_Œ®macMat( Œ∏s=hydro.Œ∏s[iZ], Œ∏sMacMat=hydro.Œ∏sMacMat[iZ], Œ∏r=hydro.Œ∏r[iZ], Œ®macMat_Max=hydro.Œ®macMat[iZ], Œ®macMat_Min=0.0, Œ∏sMacMat_Œ∑_Tresh=0.95) 

					hydro.œÉMac[iZ]  = hydroRelation.FUNC_Œ®macMat_2_œÉMac(Œ®macMat=hydro.Œ®macMat[iZ])
				
					hydro.Œ®mMac[iZ] = hydroRelation.FUNC_Œ®macMat_2_Œ®mMac(Œ®macMat=hydro.Œ®macMat[iZ], œÉMac=hydro.œÉMac[iZ])
				end

			# RELATIONSHIP BETWEEN œÉ AND Œ®m
				if (option‚Çò.œÉ_2_Œ®m‚ç∞ == "Constrained") && ("Œ®m" ‚àà optim.ParamOpt) || (option‚Çò.œÉ_2_Œ®m‚ç∞ == "UniqueRelationship") 
					hydro = hydroRelation.FUNCTION_œÉ_2_Œ®m_SOFTWARE(hydro, iZ, option‚Çò, param.hydro)
				end # option‚Çò.œÉ_2_Œ®m‚ç∞ ‚â† No

			#  <>=<>=<>=<>=<>=<> Relationship between œÉ and Œ∏r
				if option‚Çò.Œ∏rOpt‚ç∞=="œÉ_2_Œ∏r" && ("Œ∏r" ‚àâ optim.ParamOpt) && ("œÉ" ‚àà optim.ParamOpt)
					hydro.Œ∏r[iZ] = hydroRelation.œÉ_2_Œ∏r(hydro, iZ)
				end

			# Converting Œ∏sMacMat_∆û -> Œ∏sMacMat
				if  option‚Çò.HydroModel‚ç∞ == "Kosugi"
					hydro.Œ∏sMacMat[iZ] = min(hydro.Œ∏sMacMat_∆û[iZ] * (hydro.Œ∏s[iZ] - hydro.Œ∏r[iZ]) + hydro.Œ∏r[iZ], hydro.Œ∏s[iZ])

					if hydro.Œ∏sMacMat_∆û[iZ] > 0.94
						hydro.Œ∏sMacMat_∆û[iZ] = 1.0
						hydro.Œ∏sMacMat[iZ]   = hydro.Œ∏s[iZ]
						# hydro.Œ®macMat[iZ]    = hydro.Œ®macMat_Min[iZ]
					end
				end

			# Reinforcing Œ∏s >> Œòr
				if hydro.Œ∏s[iZ] < hydro.Œ∏r[iZ] + ŒîMinŒò‚Çõ_Œò·µ£
					hydro.Œ∏r[iZ] = 0.0
				end


			if üéè_CheckError
				if  option‚Çò.HydroModel‚ç∞ == "Kosugi"
					if hydro.Œ∏sMacMat[iZ] > hydro.Œ∏s[iZ]
						error("Œ∏sMacMat: $iZ $(hydro.Œ∏sMacMat[iZ])> $(hydro.Œ∏s[iZ])")
					end
				end

				if hydro.Œ∏r[iZ] > hydro.Œ∏s[iZ]
					error("Œòr_Œ∏s: iZ = $iZ  , $(hydro.Œ∏r[iZ]) > $(hydro.Œ∏s[iZ])")
				end

				if hydro.Œ∏r[iZ] < 0.0
					error("Œòr: $iZ $(hydro.Œ∏r[iZ]) < 0.0)")
				end
			end

		return hydro
		end  # function: PARAM
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


end # module optIndivSoil