
# =============================================================
#		module: optIndivSoil
# =============================================================
module optIndivSoil
	import ..hydroRelation, ..ofHydrolab, ..optimize, ..psdThetar
	using BlackBoxOptim
	export OPTIMIZE_INDIVIDUALSOILS


	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : OPTIMIZE_INDIVIDUALSOILS
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	function OPTIMIZE_INDIVIDUALSOILS(;‚àëPsd::Vector{Any}, hydro::Main.hydroStruct.KOSUGI, hydroOther::Main.hydroStruct.HYDRO_OTHER, K_KŒ®obs::Matrix{Float64}, N_KŒ®obs=1, N_Œ∏Œ®obs::Vector{Int64}, NiZ::Int64, Of_Sample::Vector{Float64}, optim::Main.reading.OPTIM, option::Main.options.OPTION, option‚Çò::Main.options.HYDRO, param::Main.params.PARAM, Œ∏_Œ∏Œ®obs::Matrix{Float64}, Œ∏œµ=0.005::Float64, Œ®_KŒ®obs::Matrix{Float64}, Œ®_Œ∏Œ®obs::Matrix{Float64})


		for iZ = 1:NiZ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

			# TEST IF EXIST Œ® ‚âà 0  ~~~
				if minimum(Œ®_Œ∏Œ®obs[iZ, 1:N_Œ∏Œ®obs[iZ]]) < 0.01 
					üéèŒòŒ®_0 = true
				else
					üéèŒòŒ®_0 = false
				end

			# FEASIBLE RANGE OF Œ∏_Œ∏Œ®obs ~~~
				Œ∏obs_Min = minimum(Œ∏_Œ∏Œ®obs[iZ, 1:N_Œ∏Œ®obs[iZ]])  # Smallest measurement of Œ∏
				Œ∏obs_Max = maximum(Œ∏_Œ∏Œ®obs[iZ, 1:N_Œ∏Œ®obs[iZ]])  # Greatest measurement of Œ∏


			# CORRECTING Œ∏r  ~~~~~
				hydro.Œ∏r_Max[iZ] = min(max(Œ∏obs_Min - Œ∏œµ, 0.0), hydro.Œ∏r_Max[iZ]) # Maximum value of Œ∏r

				if ("Œ∏r" ‚àà optim.ParamOpt)
					# Changing the feasible range of Œ∏r
					iŒ∏r = findfirst(isequal("Œ∏r"), optim.ParamOpt)[1]
					optim.ParamOpt_Max[iŒ∏r] = hydro.Œ∏r_Max[iZ]
				end

				if ("Œ∏r" ‚àâ optim.ParamOpt) && (option‚Çò.Œ∏rOpt‚ç∞=="ParamPsd") && (option.data.Psd) # Derive Œ∏r frpm PSD
					hydro.Œ∏r[iZ] = psdThetar.PSD_2_Œ∏r_FUNC(‚àëPsd, hydro, iZ, param)
					hydro.Œ∏r[iZ] = max(min(hydro.Œ∏r[iZ], hydro.Œ∏r_Max[iZ]), hydro.Œ∏r_Min[iZ])
				end # if ("Œ∏r" ‚àà optim.ParamOpt)


			# CORRECTING Œ∏s  ~~~~~
				if ("Œ∏s" ‚àà optim.ParamOpt)
					if üéèŒòŒ®_0
						hydro.Œ¶[iZ] = Œ∏obs_Max / param.hydro.Coeff_Œ¶_2_Œ∏s

						hydro.Œ∏s_Min[iZ] = Œ∏obs_Max * 0.9
						hydro.Œ∏s_Max[iZ] = Œ∏obs_Max * 1.1

					elseif !(üéèŒòŒ®_0) 
						hydro.Œ∏s_Min[iZ] = hydro.Œ¶[iZ] * 0.9
						hydro.Œ∏s_Max[iZ] = hydro.Œ¶[iZ] * 1.1
					end  # if: üéèŒòŒ®_0

					# Changing the feasible range of Œ∏s
						iŒ∏s = findfirst(isequal("Œ∏s"), optim.ParamOpt)[1]
						optim.ParamOpt_Min[iŒ∏s] = hydro.Œ∏s_Min[iZ]
						optim.ParamOpt_Max[iŒ∏s] = hydro.Œ∏s_Max[iZ]	

				elseif ("Œ∏s" ‚àâ optim.ParamOpt) # *****
					if üéèŒòŒ®_0
						hydro.Œ∏s[iZ] = Œ∏obs_Max
						hydro.Œ¶[iZ]  = hydro.Œ∏s[iZ] / param.hydro.Coeff_Œ¶_2_Œ∏s

					elseif !(üéèŒòŒ®_0)
						hydro.Œ∏s[iZ] = max(hydro.Œ¶[iZ] * param.hydro.Coeff_Œ¶_2_Œ∏s, Œ∏obs_Max + 0.0015)

					end
				end # if "Œ∏s"


			# ~~~~ TEST IF EXIST K(Œ®=0)  ~~~
				if option.data.KŒ∏
					if minimum(Œ®_KŒ®obs[iZ,1:N_KŒ®obs[iZ]]) <  0.01 
						üéè_Ks = true
					else
						üéè_Ks = false
					end
					
					K_KŒ®obs_Max = maximum(K_KŒ®obs[iZ, 1:N_KŒ®obs[iZ]])
				end # if option.data.KŒ∏

				if option.data.KŒ∏ && "Ks" ‚àà optim.ParamOpt				
					if üéè_Ks 
						hydro.Ks_Min[iZ] = K_KŒ®obs_Max * 0.95
						hydro.Ks_Max[iZ] = K_KŒ®obs_Max  * 1.1
					
					elseif !(üéè_Ks)
						hydro.Ks_Min[iZ] = max(hydro.Ks_Min[iZ], K_KŒ®obs_Max)
						hydro.Ks_Max[iZ] = max(hydro.Ks_Max[iZ], K_KŒ®obs_Max + 0.0015)
					
					end # "Ks" ‚àà optim.ParamOpt

					# Modifying the searchrange
					iKs                     = findfirst(isequal("Ks"), optim.ParamOpt)[1]
					optim.ParamOpt_Min[iKs] = hydro.Ks_Min[iZ]
					optim.ParamOpt_Max[iKs] = hydro.Ks_Max[iZ]

				elseif option.data.KŒ∏ && "Ks" ‚àâ optim.ParamOpt && üéè_Ks
					hydro.Ks[iZ] = K_KŒ®obs_Max

				end # if option.data.KŒ∏ && "Ks" ‚àà optim.ParamOpt
			

			# OPTIMIZATION: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			
				# Updated searchrange
				SearchRange = optimize.SEARCHRANGE(option‚Çò, optim)

				Optimization = BlackBoxOptim.bboptimize(X -> optIndivSoil.OF_HYDROLAB(hydro, iZ, K_KŒ®obs, N_KŒ®obs, N_Œ∏Œ®obs, Of_Sample, optim, option, option‚Çò, param, X, Œ∏_Œ∏Œ®obs, Œ®_KŒ®obs, Œ®_Œ∏Œ®obs); SearchRange=SearchRange, NumDimensions=optim.NparamOpt, TraceMode=:silent)

				X = BlackBoxOptim.best_candidate(Optimization)

				hydro = optIndivSoil.PARAM_2_hydro(hydro, iZ, optim, option‚Çò, param, X)

				# FINAL CORRECTION
					if option‚Çò.œÉ_2_Œ®m‚ç∞ ‚â† "No"
						hydro.Œ®macMat[iZ] = hydroRelation.FUNC_Œ∏sMacMatŒ∑_2_Œ®macMat(Œ∏s=hydro.Œ∏s[iZ], Œ∏sMacMat=hydro.Œ∏sMacMat[iZ], Œ∏r=hydro.Œ∏r[iZ], Œ®macMat_Max=hydro.Œ®macMat[iZ])
					end

				# STATISTICS
					if option.data.KŒ∏ && "Ks" ‚àà optim.ParamOpt
						Of_Sample, Of_Œ∏Œ®, Of_Kunsat = ofHydrolab.OF_WRC_KUNSAT(hydro, iZ, N_Œ∏Œ®obs, Of_Sample, optim, option‚Çò, Œ∏_Œ∏Œ®obs, Œ®_Œ∏Œ®obs; K_KŒ®obs=K_KŒ®obs, N_KŒ®obs=N_KŒ®obs, Œ®_KŒ®obs=Œ®_KŒ®obs)
					else
						Of_Sample, Of_Œ∏Œ®, Of_Kunsat = ofHydrolab.OF_WRC_KUNSAT(hydro, iZ, N_Œ∏Œ®obs, Of_Sample, optim, option‚Çò, Œ∏_Œ∏Œ®obs, Œ®_Œ∏Œ®obs)
					end  

					hydroOther.Rmse[iZ], hydroOther.Rmse_KŒ®[iZ], hydroOther.Rmse_Œ∏Œ®[iZ] = ofHydrolab.OF_RMSE(option, option‚Çò, iZ, Œ∏_Œ∏Œ®obs, Œ®_Œ∏Œ®obs, N_Œ∏Œ®obs, K_KŒ®obs, Œ®_KŒ®obs, N_KŒ®obs, hydro, optim)
		end # for iZ=1:NiZ
		
	return hydro, hydroOther, Of_Sample
	end  # function: OPTIMIZE_INDIVIDUALSOILS
	# ------------------------------------------------------------------


	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : OF_HYDROLAB
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		function OF_HYDROLAB(hydro, iZ, K_KŒ®obs, N_KŒ®obs, N_Œ∏Œ®obs, Of_Sample, optim, option, option‚Çò, param, X, Œ∏_Œ∏Œ®obs, Œ®_KŒ®obs, Œ®_Œ∏Œ®obs)

			# New optimized which are put into the matching veg or hydro parameters
				hydro = optIndivSoil.PARAM_2_hydro(hydro, iZ, optim, option‚Çò, param, X)
		
			# Weighted Objective Function
			if option.data.KŒ∏ && "Ks" ‚àà optim.ParamOpt
				Of_Sample, Of_Œ∏Œ®, Of_Kunsat = ofHydrolab.OF_WRC_KUNSAT(hydro, iZ, N_Œ∏Œ®obs, Of_Sample, optim, option‚Çò, Œ∏_Œ∏Œ®obs, Œ®_Œ∏Œ®obs; K_KŒ®obs=K_KŒ®obs, N_KŒ®obs=N_KŒ®obs, Œ®_KŒ®obs=Œ®_KŒ®obs)
			else
				Of_Sample, Of_Œ∏Œ®, Of_Kunsat = ofHydrolab.OF_WRC_KUNSAT(hydro, iZ, N_Œ∏Œ®obs, Of_Sample, optim, option‚Çò, Œ∏_Œ∏Œ®obs, Œ®_Œ∏Œ®obs)
			end 
		return Of_Sample[iZ]
		end  # function: OF_HYPIX
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : PARAM
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		function PARAM_2_hydro(hydro, iZ, optim, option‚Çò, param, X; ŒîMinŒò‚Çõ_Œò·µ£=0.05)
			for iParam = 1:optim.NparamOpt
				
				# Determening if parameters are Log transformed
					if (optim.ParamOpt_LogTransform[iParam]) && !(optim.ParamOpt[iParam]=="Œ®m" && option‚Çò.œÉ_2_Œ®m‚ç∞ == "Constrained")
						Param‚Çê = expm1(X[iParam])
					else
						Param‚Çê = X[iParam]
					end  # if: optim.ParamOpt_LogTransform

				# Getting the current values of every layer of the hydro parameter of interest
					vectParam = getfield(hydro, Symbol(optim.ParamOpt[iParam]))

				# Updating the value of the parameters for the soil wanting to optimize by keeping the values constant
					vectParam[iZ] = Param‚Çê

				# Putting the updated hydro into hydro
					setfield!(hydro, Symbol(optim.ParamOpt[iParam]), vectParam)
			end # for loop

			# ==================== SPECIAL CASES ====================

			# RELATIONSHIP BETWEEN Œ®macMat ‚û° œÉMac & Œ®mMac
				if option‚Çò.Œ®macMat_2_œÉMac_Œ®mMac
					Œ®macMat‚ÇÅ = hydroRelation.FUNC_Œ∏sMacMatŒ∑_2_Œ®macMat( Œ∏s=hydro.Œ∏s[iZ], Œ∏sMacMat=hydro.Œ∏sMacMat[iZ], Œ∏r=hydro.Œ∏r[iZ], Œ®macMat_Max=hydro.Œ®macMat[iZ], Œ®macMat_Min=0.0, Œ∏sMacMat_Œ∑_Tresh=0.95) 

					hydro.œÉMac[iZ]  = hydroRelation.FUNC_Œ®macMat_2_œÉMac(Œ®macMat=Œ®macMat‚ÇÅ)
				
					hydro.Œ®mMac[iZ] = hydroRelation.FUNC_Œ®macMat_2_Œ®mMac(Œ®macMat=Œ®macMat‚ÇÅ, œÉMac=hydro.œÉMac[iZ])
				end

			# RELATIONSHIP BETWEEN œÉ AND Œ®m
				if (option‚Çò.œÉ_2_Œ®m‚ç∞ ‚â† "No") && ("Œ®m" ‚àà optim.ParamOpt)
					hydro = hydroRelation.FUNCTION_œÉ_2_Œ®m_SOFTWARE(hydro, iZ, option‚Çò, param.hydro)

				elseif (option‚Çò.œÉ_2_Œ®m‚ç∞ =="UniqueRelationship") 
					hydro = hydroRelation.FUNCTION_œÉ_2_Œ®m_SOFTWARE(hydro, iZ, option‚Çò, param.hydro)

				end # option‚Çò.œÉ_2_Œ®m‚ç∞ ‚â† No

			#  <>=<>=<>=<>=<>=<> Relationship between œÉ and Œ∏r
				if option‚Çò.Œ∏rOpt‚ç∞=="œÉ_2_Œ∏r" && ("Œ∏r" ‚àâ optim.ParamOpt) && ("œÉ" ‚àà optim.ParamOpt)
					hydro.Œ∏r[iZ] = hydroRelation.œÉ_2_Œ∏r(hydro, iZ)
				end

			# Reinforcing Œ∏s >> Œòr
				if hydro.Œ∏s[iZ] < hydro.Œ∏r[iZ] + ŒîMinŒò‚Çõ_Œò·µ£
					hydro.Œ∏r[iZ] = 0.0
				end

			# Converting Œ∏sMacMat_∆û -> Œ∏sMacMat
				if  option‚Çò.HydroModel‚ç∞ == "Kosugi"
					hydro.Œ∏sMacMat[iZ] = min(hydro.Œ∏sMacMat_∆û[iZ] * (hydro.Œ∏s[iZ] - hydro.Œ∏r[iZ]) + hydro.Œ∏r[iZ], hydro.Œ∏s[iZ])
				end

				if  option‚Çò.HydroModel‚ç∞ == "Kosugi"
					if hydro.Œ∏sMacMat[iZ] > hydro.Œ∏s[iZ]
						error("Œ∏sMacMat: $iZ $(hydro.Œ∏sMacMat[iZ])> $(hydro.Œ∏s[iZ])")
					end
				end

				if hydro.Œ∏r[iZ] > hydro.Œ∏s[iZ]
					error("Œòr_Œ∏s: iZ = $iZ  , $(hydro.Œ∏r[iZ]) > $(hydro.Œ∏s[iZ])")
				end

				if hydro.Œ∏r[iZ] < 0.0
					error("Œòr: $iZ $(hydro.Œ∏r[iZ]) < 0.0)")
				end

		return hydro
		end  # function: PARAM
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


end # module optIndivSoil