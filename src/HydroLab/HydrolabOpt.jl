# =============================================================
#		module: hypixOpt
# =============================================================
module hydrolabOpt
	import ..ofHydrolab, ..tool, ..optimize, ..hydroRelation, ..psdThetar, ..stats
	using BlackBoxOptim, Statistics
	export HYDROLABOPT_START

	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : HYPIXOPT_START
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	function HYDROLABOPT_START(;NiZ, ‚àëPsd, Œ∏_Œ∏Œ®obs, Œ®_Œ∏Œ®obs, N_Œ∏Œ®obs, K_KŒ®obs=[0], Œ®_KŒ®obs=[0], N_KŒ®obs=1, hydro, hydroOther, option, option‚Çò, optim, param, Œ∏œµ=0.005)
		
		for iZ = 1:NiZ

			# TEST IF EXIST Œ® ‚âà 0  ~~~
				if minimum(Œ®_Œ∏Œ®obs[iZ,1:N_Œ∏Œ®obs[iZ]]) < Œ∏œµ 
					üéèŒòŒ®_0 = true
				else
					üéèŒòŒ®_0 = false
				end

			# FEASIBLE RANGE OF Œ∏_Œ∏Œ®obs ~~~
				Œ∏obs_Min = minimum(Œ∏_Œ∏Œ®obs[iZ, 1:N_Œ∏Œ®obs[iZ]])  # Smallest measurement of Œ∏

				Œ∏obs_Max = maximum(Œ∏_Œ∏Œ®obs[iZ, 1:N_Œ∏Œ®obs[iZ]])  # Greatest measurement of Œ∏


			# CORRECTING Œ∏r  ~~~~~
				hydro.Œ∏r_Max[iZ] = min(max(Œ∏obs_Min - Œ∏œµ, 0.0), hydro.Œ∏r_Max[iZ]) # Maximum value of Œ∏r

				if ("Œ∏r" ‚àà optim.ParamOpt)
					# Changing the feasible range of Œ∏r
					iŒ∏r = findfirst(isequal("Œ∏r"), optim.ParamOpt)[1]
					optim.ParamOpt_Max[iŒ∏r] = hydro.Œ∏r_Max[iZ]
				end

				if ("Œ∏r" ‚àâ optim.ParamOpt) && (option‚Çò.Œ∏rOpt‚ç∞=="ParamPsd") && (option.data.Psd) # Derive Œ∏r frpm PSD
					hydro.Œ∏r[iZ] = psdThetar.PSD_2_Œ∏r_FUNC(‚àëPsd, hydro, iZ, param)
					hydro.Œ∏r[iZ] = max(min(hydro.Œ∏r[iZ], hydro.Œ∏r_Max[iZ]), hydro.Œ∏r_Min[iZ])
				end # if ("Œ∏r" ‚àà optim.ParamOpt)


			# CORRECTING Œ∏s  ~~~~~
				if ("Œ∏s" ‚àà optim.ParamOpt) # *****
					if üéèŒòŒ®_0
						hydro.Œ¶[iZ] = Œ∏obs_Max / param.hydro.Coeff_Œ¶_2_Œ∏s

						# Changing the feasible range of Œ∏s
							iŒ∏s = findfirst(isequal("Œ∏s"), optim.ParamOpt)[1]
							optim.ParamOpt_Min[iŒ∏s] = Œ∏_Œ∏Œ®obs[iZ, 2]
							optim.ParamOpt_Max[iŒ∏s] = Œ∏obs_Max * 1.1

					elseif !(üéèŒòŒ®_0) 
						hydro.Œ∏s_Min[iZ] = Œ∏obs_Max
						hydro.Œ∏s_Max[iZ] = max(hydro.Œ¶[iZ], Œ∏obs_Max * 1.1)

						# Changing the feasible range of Œ∏s
							iŒ∏s = findfirst(isequal("Œ∏s"), optim.ParamOpt)[1]
							optim.ParamOpt_Min[iŒ∏s] = hydro.Œ∏s_Min[iZ]
							optim.ParamOpt_Max[iŒ∏s] = hydro.Œ∏s_Max[iZ]	
					end  # if: üéèŒòŒ®_0

				elseif ("Œ∏s" ‚àâ optim.ParamOpt) # *****
					if üéèŒòŒ®_0
						hydro.Œ∏s[iZ] = Œ∏obs_Max
						hydro.Œ¶[iZ]  = hydro.Œ∏s[iZ] / param.hydro.Coeff_Œ¶_2_Œ∏s

					elseif !(üéèŒòŒ®_0)
						hydro.Œ∏s[iZ] = max(hydro.Œ¶[iZ] * param.hydro.Coeff_Œ¶_2_Œ∏s, Œ∏obs_Max + 0.015)
					end
				end # if "Œ∏s"


			# test if exist K(Œ®=0) and therefore we can obtain Ks from data  ~~~
				if option.data.KŒ∏
					if minimum(Œ®_KŒ®obs[iZ,1:N_KŒ®obs[iZ]]) < eps(1000.0)  
						üéè_Ks = true
					else
						üéè_Ks = false
					end
					
					K_KŒ®obs_Max = maximum(K_KŒ®obs[iZ, 1:N_KŒ®obs[iZ]])
				end # if option.data.KŒ∏


				if option.data.KŒ∏ && "Ks" ‚àà optim.ParamOpt
					if !(üéè_Ks) 
						# Modifying the searchrange
						iKs = findfirst(isequal("Ks"), optim.ParamOpt)[1]
						optim.ParamOpt_Min[iKs] = max(hydro.Ks_Min[iZ], K_KŒ®obs_Max)
						optim.ParamOpt_Max[iKs] = max(optim.ParamOpt_Max[iKs], optim.ParamOpt_Min[iKs] + 0.01)

					elseif üéè_Ks 
						# Modifying the searchrange
                     iKs                     = findfirst(isequal("Ks"), optim.ParamOpt)[1]
                     optim.ParamOpt_Min[iKs] = K_KŒ®obs_Max * 0.9
                     optim.ParamOpt_Max[iKs] = K_KŒ®obs_Max  * 1.1
					end # "Ks" ‚àà optim.ParamOpt

				elseif option.data.KŒ∏ && "Ks" ‚àâ optim.ParamOpt && üéè_Ks
					hydro.Ks[iZ] = K_KŒ®obs_Max

				end # if option.data.KŒ∏ && "Ks" ‚àà optim.ParamOpt
			
			# Updated searchrange
				SearchRange = optimize.SEARCHRANGE(option‚Çò, optim)


			# OPTIMIZATION: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

				Optimization = BlackBoxOptim.bboptimize(X -> hydrolabOpt.OF_HYDROLAB(hydro, iZ, K_KŒ®obs, N_KŒ®obs, N_Œ∏Œ®obs, optim, option, option‚Çò, param, X, Œ∏_Œ∏Œ®obs, Œ®_KŒ®obs, Œ®_Œ∏Œ®obs); SearchRange=SearchRange, NumDimensions=optim.NparamOpt, TraceMode=:silent)

				X = BlackBoxOptim.best_candidate(Optimization)

				hydro = hydrolabOpt.PARAM_2_hydro(hydro, iZ, optim, option‚Çò, param, X)

				# FINAL CORRECTION
					if option‚Çò.œÉ_2_Œ®m‚ç∞ ‚â† "No"
						hydro.Œ®macMat[iZ] = hydroRelation.FUNC_Œ∏sMacMatŒ∑_2_Œ®macMat(Œ∏s=hydro.Œ∏s[iZ], Œ∏sMacMat=hydro.Œ∏sMacMat[iZ], Œ∏r=hydro.Œ∏r[iZ], Œ®macMat_Max=hydro.Œ®macMat[iZ])
					end

				# STATISTICS
					if option.data.KŒ∏ && "Ks" ‚àà optim.ParamOpt
						Of, Of_Œ∏Œ®, Of_Kunsat = ofHydrolab.OF_WRC_KUNSAT(hydro, iZ, N_Œ∏Œ®obs, optim, option‚Çò, Œ∏_Œ∏Œ®obs, Œ®_Œ∏Œ®obs; K_KŒ®obs=K_KŒ®obs, N_KŒ®obs=N_KŒ®obs, Œ®_KŒ®obs=Œ®_KŒ®obs)
					else
						Of, Of_Œ∏Œ®, Of_Kunsat = ofHydrolab.OF_WRC_KUNSAT(hydro, iZ, N_Œ∏Œ®obs, optim, option‚Çò, Œ∏_Œ∏Œ®obs, Œ®_Œ∏Œ®obs)
					end  

					hydroOther.Rmse[iZ], hydroOther.Rmse_KŒ®[iZ], hydroOther.Rmse_Œ∏Œ®[iZ] = ofHydrolab.OF_RMSE(option, option‚Çò, iZ, Œ∏_Œ∏Œ®obs, Œ®_Œ∏Œ®obs, N_Œ∏Œ®obs, K_KŒ®obs, Œ®_KŒ®obs, N_KŒ®obs, hydro, optim) 
		end # for iZ = 1:NiZ

		hydroOther.Nse_Œ∏Œ®, ~, ~ = stats.NSE_Œ∏Œ®(hydro, N_Œ∏Œ®obs, NiZ,  option‚Çò, Œ∏_Œ∏Œ®obs, Œ®_Œ∏Œ®obs)

		hydroOther.NseWilmot_Œ∏Œ®, ~, ~ = stats.NSE_WILMOT_Œ∏Œ®(hydro, N_Œ∏Œ®obs, NiZ,  option‚Çò, Œ∏_Œ∏Œ®obs, Œ®_Œ∏Œ®obs)
	
		if "Ks" ‚àà optim.ParamOpt
			hydroOther.Nse_KŒ®, ~, ~ = stats.NSE_KŒ®(hydro, N_KŒ®obs, NiZ, option‚Çò, K_KŒ®obs, Œ®_KŒ®obs)

			hydroOther.NseWilmot_KŒ®, ~, ~ = stats.NSE_WILMOT_KŒ®(hydro, N_KŒ®obs, NiZ, option‚Çò, K_KŒ®obs, Œ®_KŒ®obs)

			hydroOther.Nse = (hydroOther.Nse_KŒ® .+ hydroOther.Nse_Œ∏Œ®) ./ 2.0
		else
			hydroOther.Nse = deepcopy(hydroOther.Nse_Œ∏Œ®)
		end

		# OVERALL STATISTICS OF THE OPTIMIZATION
			Nse_Œ∏Œ®_Aver = Statistics.mean(hydroOther.Nse_Œ∏Œ®[1:NiZ])
			Nse_KŒ®_Aver = Statistics.mean(max.(hydroOther.Nse_KŒ®[1:NiZ], 0.0))

			NseWilmot_Œ∏Œ®_Aver = Statistics.mean(hydroOther.NseWilmot_Œ∏Œ®[1:NiZ])
			NseWilmot_KŒ®_Aver = Statistics.mean(max.(hydroOther.NseWilmot_KŒ®[1:NiZ], 0.0))

			Rmse_Aver    = Statistics.mean(hydroOther.Rmse[1:NiZ])
			Rmse_Œ∏Œ®_Aver = Statistics.mean(hydroOther.Rmse_Œ∏Œ®[1:NiZ])
			Rmse_KŒ®_Aver = Statistics.mean(hydroOther.Rmse_KŒ®[1:NiZ])
				
			if "Ks" ‚àà optim.ParamOpt
				Nse_Aver = (Nse_Œ∏Œ®_Aver + Nse_KŒ®_Aver) / 2.0
			else
				Nse_Aver = Nse_Œ∏Œ®_Aver
			end

			println("	=== === Optimizing Hydraulic parameters === ")
			println("    		~  Nse_Œ∏Œ®= $(round(Nse_Œ∏Œ®_Aver,digits=3)),  NseWilmot_Œ∏Œ®= $(round(NseWilmot_Œ∏Œ®_Aver,digits=3)), Nse_KŒ®_Aver= $(round(Nse_KŒ®_Aver,digits=3)), NseWilmot_KŒ®= $(round(NseWilmot_KŒ®_Aver,digits=3)), Nse = $(round(Nse_Aver,digits=3))  ~")
			println("    		~  Rmse_Œ∏Œ® = $(round(Rmse_Œ∏Œ®_Aver,digits=4)),  RmseLog10_KŒ® = $(round(Rmse_KŒ®_Aver,digits=4)), Rmse = $(round(Rmse_Aver,digits=4))  ~ \n")
			println( "	=== === ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ === ===")
	return hydro, hydroOther
	end  # function: HYPIXOPT_START


	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : OF_HYPIX
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		function OF_HYDROLAB(hydro, iZ, K_KŒ®obs, N_KŒ®obs, N_Œ∏Œ®obs, optim, option, option‚Çò, param, X, Œ∏_Œ∏Œ®obs, Œ®_KŒ®obs, Œ®_Œ∏Œ®obs)
			# New optimized which are put into the matching veg or hydro parameters
				hydro = hydrolabOpt.PARAM_2_hydro(hydro, iZ, optim, option‚Çò, param, X)
		
			# Weighted Objective Function
			if option.data.KŒ∏ && "Ks" ‚àà optim.ParamOpt
				Of, Of_Œ∏Œ®, Of_Kunsat = ofHydrolab.OF_WRC_KUNSAT(hydro, iZ, N_Œ∏Œ®obs, optim, option‚Çò, Œ∏_Œ∏Œ®obs, Œ®_Œ∏Œ®obs; K_KŒ®obs=K_KŒ®obs, N_KŒ®obs=N_KŒ®obs, Œ®_KŒ®obs=Œ®_KŒ®obs)
			else
				Of, Of_Œ∏Œ®, Of_Kunsat = ofHydrolab.OF_WRC_KUNSAT(hydro, iZ, N_Œ∏Œ®obs, optim, option‚Çò, Œ∏_Œ∏Œ®obs, Œ®_Œ∏Œ®obs)
			end 
		return Of
		end  # function: OF_HYPIX

	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : PARAM
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		function PARAM_2_hydro(hydro, iZ, optim, option‚Çò, param, X; ŒîMinŒò‚Çõ_Œò·µ£=0.05)
			for iParam = 1:optim.NparamOpt
				# Determening if parameters are Log transformed
					if (optim.ParamOpt_LogTransform[iParam]) && !(optim.ParamOpt[iParam]=="Œ®m" && option‚Çò.œÉ_2_Œ®m‚ç∞ == "Constrained")
						Param‚Çê = expm1(X[iParam])
					else
						Param‚Çê = X[iParam]
					end  # if: optim.ParamOpt_LogTransform

				# Getting the current values of every layer of the hydro parameter of interest
					vectParam = getfield(hydro, Symbol(optim.ParamOpt[iParam]))

				# Updating the value of the parameters for the soil wanting to optimize by keeping the values constant
					vectParam[iZ] = Param‚Çê

				# Putting the updated hydro into hydro
					setfield!(hydro, Symbol(optim.ParamOpt[iParam]), vectParam)
			end # for loop

			# ==================== SPECIAL CASES ====================

			# RELATIONSHIP BETWEEN Œ®macMat ‚û° œÉMac & Œ®mMac
				if option‚Çò.Œ®macMat_2_œÉMac_Œ®mMac
					Œ®macMat‚ÇÅ = hydroRelation.FUNC_Œ∏sMacMatŒ∑_2_Œ®macMat( Œ∏s=hydro.Œ∏s[iZ], Œ∏sMacMat=hydro.Œ∏sMacMat[iZ], Œ∏r=hydro.Œ∏r[iZ], Œ®macMat_Max=hydro.Œ®macMat[iZ], Œ®macMat_Min=0.0, Œ∏sMacMat_Œ∑_Tresh=0.95) 

               hydro.œÉMac[iZ]  = hydroRelation.FUNC_Œ®macMat_2_œÉMac(Œ®macMat=Œ®macMat‚ÇÅ)
            
				   hydro.Œ®mMac[iZ] = hydroRelation.FUNC_Œ®macMat_2_Œ®mMac(Œ®macMat=Œ®macMat‚ÇÅ, œÉMac=hydro.œÉMac[iZ])
				end

			# RELATIONSHIP BETWEEN œÉ AND Œ®m
				if (option‚Çò.œÉ_2_Œ®m‚ç∞ ‚â† "No") && ("Œ®m" ‚àà optim.ParamOpt)
					hydro = hydroRelation.FUNCTION_œÉ_2_Œ®m_SOFTWARE(hydro, iZ, option‚Çò, param.hydro)

				elseif (option‚Çò.œÉ_2_Œ®m‚ç∞ =="UniqueRelationship") 
					hydro = hydroRelation.FUNCTION_œÉ_2_Œ®m_SOFTWARE(hydro, iZ, option‚Çò, param.hydro)

				end # option‚Çò.œÉ_2_Œ®m‚ç∞ ‚â† No

			#  <>=<>=<>=<>=<>=<> Relationship between œÉ and Œ∏r
				if option‚Çò.Œ∏rOpt‚ç∞=="œÉ_2_Œ∏r" && ("Œ∏r" ‚àâ optim.ParamOpt) && ("œÉ" ‚àà optim.ParamOpt)
					hydro.Œ∏r[iZ] = hydroRelation.œÉ_2_Œ∏r(hydro, iZ)
				end

			# Reinforcing Œ∏s >> Œòr
				if hydro.Œ∏s[iZ] < hydro.Œ∏r[iZ] + ŒîMinŒò‚Çõ_Œò·µ£
					hydro.Œ∏r[iZ] = 0.0
				end

			# Converting Œ∏sMacMat_∆û -> Œ∏sMacMat
				if  option‚Çò.HydroModel‚ç∞ == "Kosugi"
					hydro.Œ∏sMacMat[iZ] = min(hydro.Œ∏sMacMat_∆û[iZ] * (hydro.Œ∏s[iZ] - hydro.Œ∏r[iZ]) + hydro.Œ∏r[iZ], hydro.Œ∏s[iZ])
				end

				if  option‚Çò.HydroModel‚ç∞ == "Kosugi"
					if hydro.Œ∏sMacMat[iZ] > hydro.Œ∏s[iZ]
						error("Œ∏sMacMat: $iZ $(hydro.Œ∏sMacMat[iZ])> $(hydro.Œ∏s[iZ])")
					end
				end

				if hydro.Œ∏r[iZ] > hydro.Œ∏s[iZ]
					error("Œòr_Œ∏s: iZ = $iZ  , $(hydro.Œ∏r[iZ]) > $(hydro.Œ∏s[iZ])")
				end

				if hydro.Œ∏r[iZ] < 0.0
					error("Œòr: $iZ $(hydro.Œ∏r[iZ]) < 0.0)")
				end

		return hydro
		end  # function: PARAM

end  # module hypixOpt
# ............................................................