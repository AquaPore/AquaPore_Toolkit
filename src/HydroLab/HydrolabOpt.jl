# =============================================================
#		module: hypixOpt
# =============================================================
module hydrolabOpt

	import   ..stats, ..optIndivSoil, ..optAllSoil, ..ofHydrolab
	using  Statistics
	export HYDROLABOPT_START

	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#		FUNCTION : HYPIXOPT_START
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	function HYDROLABOPT_START(;‚àëPsd, hydro, hydroOther, K_KŒ®obs=zeros(Float64,1,1), N_KŒ®obs=1, N_Œ∏Œ®obs, NiZ, optim, optimAllSoils, option, option‚Çò, param, Œ∏_Œ∏Œ®obs, Œ®_KŒ®obs=zeros(Float64,1,1), Œ®_Œ∏Œ®obs)
		

		if optimAllSoils.üéè_Opt
			# OPTIMISATION ALL SOILS
				hydro = optAllSoil.OPTIMIZE_ALLSOILS(;‚àëPsd, hydro, hydroOther, K_KŒ®obs, N_KŒ®obs, N_Œ∏Œ®obs, NiZ, optim, optimAllSoils, option, option‚Çò, param, Œ∏_Œ∏Œ®obs, Œ∏œµ=0.005, Œ®_KŒ®obs, Œ®_Œ∏Œ®obs)

				 hydro, hydroOther, Of_Sample = optIndivSoil.OPTIMIZE_INDIVIDUALSOILS(;‚àëPsd, hydro, hydroOther, K_KŒ®obs, N_KŒ®obs, N_Œ∏Œ®obs, NiZ, optim, option, option‚Çò, param, Œ∏_Œ∏Œ®obs, Œ∏œµ=0.005, Œ®_KŒ®obs, Œ®_Œ∏Œ®obs)

				OfAllSoil = ofHydrolab.OF_ALLSOILS(NiZ::Int64, Of_Sample::Vector{Float64})

				printstyled("				OfAllSoil =  ", trunc(OfAllSoil,digits=3), "\n"; color=:blue)

		else
		# OPTIMISATION INDIVIDUAL SOIL
			hydro, hydroOther, Of_Sample = optIndivSoil.OPTIMIZE_INDIVIDUALSOILS(;‚àëPsd, hydro, hydroOther, K_KŒ®obs, N_KŒ®obs, N_Œ∏Œ®obs, NiZ, optim, option, option‚Çò, param, Œ∏_Œ∏Œ®obs, Œ∏œµ=0.005, Œ®_KŒ®obs, Œ®_Œ∏Œ®obs)
		end

		# STATISCS
         hydroOther.Nse_Œ∏Œ®, ~, ~       = stats.NSE_Œ∏Œ®(hydro, N_Œ∏Œ®obs, NiZ,  option‚Çò, Œ∏_Œ∏Œ®obs, Œ®_Œ∏Œ®obs)
         hydroOther.NseWilmot_Œ∏Œ®, ~, ~ = stats.NSE_WILMOT_Œ∏Œ®(hydro, N_Œ∏Œ®obs, NiZ,  option‚Çò, Œ∏_Œ∏Œ®obs, Œ®_Œ∏Œ®obs)
		
			if "Ks" ‚àà optim.ParamOpt
            hydroOther.Nse_KŒ®, ~, ~       = stats.NSE_KŒ®(hydro, N_KŒ®obs, NiZ, option‚Çò, K_KŒ®obs, Œ®_KŒ®obs)
            hydroOther.NseWilmot_KŒ®, ~, ~ = stats.NSE_WILMOT_KŒ®(hydro, N_KŒ®obs, NiZ, option‚Çò, K_KŒ®obs, Œ®_KŒ®obs)
            hydroOther.Nse                = (hydroOther.Nse_KŒ® .+ hydroOther.Nse_Œ∏Œ®) ./ 2.0

			else
				hydroOther.Nse = deepcopy(hydroOther.Nse_Œ∏Œ®)
			end

		# OVERALL STATISTICS OF THE OPTIMIZATION
         Nse_Œ∏Œ®_Aver       = Statistics.mean(hydroOther.Nse_Œ∏Œ®[1:NiZ])
         Nse_KŒ®_Aver       = Statistics.mean(max.(hydroOther.Nse_KŒ®[1:NiZ], 0.0))

         NseWilmot_Œ∏Œ®_Aver = Statistics.mean(hydroOther.NseWilmot_Œ∏Œ®[1:NiZ])
         NseWilmot_KŒ®_Aver = Statistics.mean(max.(hydroOther.NseWilmot_KŒ®[1:NiZ], 0.0))

         Rmse_Aver         = Statistics.mean(hydroOther.Rmse[1:NiZ])
         Rmse_Œ∏Œ®_Aver      = Statistics.mean(hydroOther.Rmse_Œ∏Œ®[1:NiZ])
         Rmse_KŒ®_Aver      = Statistics.mean(hydroOther.Rmse_KŒ®[1:NiZ])
				
			if "Ks" ‚àà optim.ParamOpt
				Nse_Aver = (Nse_Œ∏Œ®_Aver + Nse_KŒ®_Aver) / 2.0
			else
				Nse_Aver = Nse_Œ∏Œ®_Aver
			end

			println("	=== === Optimizing Hydraulic parameters === ")
			println("    		~  Nse_Œ∏Œ®= $(round(Nse_Œ∏Œ®_Aver,digits=3)),  NseWilmot_Œ∏Œ®= $(round(NseWilmot_Œ∏Œ®_Aver,digits=3)), Nse_KŒ®_Aver= $(round(Nse_KŒ®_Aver,digits=3)), NseWilmot_KŒ®= $(round(NseWilmot_KŒ®_Aver,digits=3)), Nse = $(round(Nse_Aver,digits=3))  ~")
			println("    		~  Rmse_Œ∏Œ® = $(round(Rmse_Œ∏Œ®_Aver,digits=4)),  RmseLog10_KŒ® = $(round(Rmse_KŒ®_Aver,digits=4)), Rmse = $(round(Rmse_Aver,digits=4))  ~ \n")
			println( "	=== === ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ === ===")

	return hydro, hydroOther
	end  # function: HYPIXOPT_START


end  # module hydrolabOpt
# ............................................................