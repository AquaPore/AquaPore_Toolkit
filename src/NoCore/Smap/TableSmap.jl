# =============================================================
#		module: tableSmap
# =============================================================
module tableSmap
   import ..tool, ..wrc, ..kunsat, ..cst
   import CSV, Tables

   	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		#		FUNCTION : Œ∏Œ®K
		# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         function Œ∏Œ®K(hydro, hydroOther, IdSelect, K‚ÇõModel, NiZ, Path, smap)
            println("    ~  $(Path) ~")

            Matrix, FieldName_String = tool.readWrite.STRUCT_2_FIELDNAME(NiZ, hydro)

            Matrix2, FieldName_String2 = tool.readWrite.STRUCT_2_FIELDNAME(NiZ, hydroOther)

            # Concatenating matrices
               Matrix = hcat(Matrix, Matrix2)

               Matrix = hcat(Matrix, K‚ÇõModel)

               FieldName_String = vcat(FieldName_String, FieldName_String2)

               FieldName_String = vcat("Id", "SoilName", "Depth", FieldName_String, "Ks_Model[mm/s]")

               CSV.write(Path, Tables.table( [string.(IdSelect[1:NiZ]) smap.Soilname[1:NiZ] smap.Smap_Depth[1:NiZ] Matrix]), writeheader=true, header=FieldName_String, bom=true)
         return nothing
         end  # function:  Œ∏Œ®K

   # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   #		FUNCTION : Smap
   # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   """
   TopnetModel = ["ThetaS_Ch[mm3_mm3]";"ThetaR_Ch[mm3_mm3]";"LambdaCh_Ch[-]";"Hch_Ch[mm]";" Hga_Ch[mm]";"Ks_Vg[mm_s1]; "0mm"; "500mm"; "1000mm"; "2000mm"; "4000mm"; "10000mm"; "150000mm"]

   JulesModel_CH =  ["ThetaS_Ch[mm3_mm3]";"ThetaR_Ch[mm3_mm3]";"LambdaCh_Ch[-]";"Hch_Ch[mm]"; "Ks_Ch[mm_s1]";" Hga_Ch[mm]";"3300mm";"10000mm" ;"150000mm"]

   JulesModel_VangenuchtenJules = ["ThetaS_VgJules[mm3_mm3]";"ThetaR_VgJules[mm3_mm3]";"n_VgJules[-]";"Hvg_VgJules[mm]"; "Ks_VgJules[mm_s1]";"3300mm";"10000mm"]

   """
      function SMAP(hydro, IdSelect, IsTopsoil, NiZ, option‚Çò, param, path, smap)

         println("    ~  $(path.tableSmap.Table_Smap) ~")

          # User input
            HeaderSmap = true # <true> the greek characters are replaced by alphabet; <false> original parameter names with no units usefull to use values in SoilWater-ToolBox

            üéè_BrooksCorey       = true
            üéè_ClappHornberger   = true
            üéè_VanGenuchten      = false
            üéè_VanGenuchtenJules = false
            üéè_Kosugi            = true
            üéè_Kosugi_Table_Œ∏œà   = true
            üéè_Kosugi_Table_Kœà   = true
            üéè_Fc_Pwp_Paw        = true

         Header = ["Id"; "SoilName"; "Depth_mm"; "IsTopsoil"; "RockFragment_%";"MaxRootingDepth_mm"; "PermeabilityClass"; "SmapFH"; "ImpermClass"]
         Data = []
      
      # Select data
         # HydroModel_Œ∏Œ® == "BrooksCorey"
         if üéè_BrooksCorey # <>=<>=<>=<>=<>=<>=<>=<>=<>=<>
            HydroModel_Œ∏Œ® = "BrooksCorey"

            Path_Œ∏Œ® =  path.tableSoilwater.Path_Soilwater_Table *  "_" * string(HydroModel_Œ∏Œ®) *  "_" * "Table_Smap_Œ∏Œ®K.csv"
            
            if isfile(Path_Œ∏Œ®)
               Select_Œ∏Œ® = ["Œ∏s";"Œ∏r";"Œªbc";"Œ®bc"; "Ks"; "Œ®ga"]
               
               Data_Œ∏Œ® = Tables.matrix(CSV.File(Path_Œ∏Œ®, select=Select_Œ∏Œ®))

               try
                  Data = hcat(Data[1:NiZ, :], Data_Œ∏Œ®[1:NiZ, :])
               catch
                  Data = Data_Œ∏Œ®[1:NiZ, :]
               end
               
               if HeaderSmap
                  Header_Œ∏Œ® = ["ThetaS_Bc[mm3_mm3]";"ThetaR_Bc[mm3_mm3]";"LambdaBc_Bc[-]";"Hbc_Bc[mm]";"Ks_Bc[mm_s1]";"Hga_Bc[mm]"]
               else
                  Header_Œ∏Œ® = Select_Œ∏Œ®
               end

               Header =  append!(Header, Header_Œ∏Œ®)
            else
               @warn("\n \n WARNING Smap_Output: model simulation not found: $HydroModel_Œ∏Œ® \n")
            end # if isfile(Path_Œ∏Œ®)
         end # üéè_BrooksCorey


         # HydroModel_Œ∏Œ® == "ClappHornberger"
         if  üéè_ClappHornberger # <>=<>=<>=<>=<>=<>=<>=<>=<>=<>
            HydroModel_Œ∏Œ® = "ClappHornberger"

            Path_Œ∏Œ® =  path.tableSoilwater.Path_Soilwater_Table *  "_" * string(HydroModel_Œ∏Œ®) *  "_" * "Table_Smap_Œ∏Œ®K.csv"

            if isfile(Path_Œ∏Œ®)
               Select_Œ∏Œ® = ["Œ∏s";"Œ∏r";"Œªch";"Œ®ch";"Ks";"Œ®ga"]

               Data_Œ∏Œ® = Tables.matrix(CSV.File(Path_Œ∏Œ®, select=Select_Œ∏Œ®))

               try
                  Data = hcat(Data[1:NiZ, :], Data_Œ∏Œ®[1:NiZ, :])
               catch
                  Data = Data_Œ∏Œ®[1:NiZ, :]
               end

               if HeaderSmap
                  Header_Œ∏Œ® = ["ThetaS_Ch[mm3_mm3]";"ThetaR_Ch[mm3_mm3]";"LambdaCh_Ch[-]";"Hch_Ch[mm]"; "Ks_Ch[mm_s1]";" Hga_Ch[mm]"]
               else
                  Header_Œ∏Œ® = Select_Œ∏Œ®
               end

               Header =  append!(Header, Header_Œ∏Œ®)
            else
               @warn("\n \n WARNING Smap_Output: model simulation not found: $HydroModel_Œ∏Œ® \n")
            end # if isfile(Path_Œ∏Œ®)
         end #  üéè_ClappHornberger

         
         # HydroModel_Œ∏Œ® == "Vangenuchten"
         if üéè_VanGenuchten # <>=<>=<>=<>=<>=<>=<>=<>=<>=<>
            HydroModel_Œ∏Œ® = "Vangenuchten"

            Path_Œ∏Œ® =  path.tableSoilwater.Path_Soilwater_Table *  "_" * string(HydroModel_Œ∏Œ®) *  "_" * "Table_Smap_Œ∏Œ®K.csv"

            if isfile(Path_Œ∏Œ®)
               Select_Œ∏Œ® = ["Œ∏s";"Œ∏r";"N";"Œ®vg"; "Ks"]
               
               Data_Œ∏Œ® = Tables.matrix(CSV.File(Path_Œ∏Œ®, select=Select_Œ∏Œ®))
                  
               try
                  Data = hcat(Data[1:NiZ, :], Data_Œ∏Œ®[1:NiZ, :])
               catch
                  Data = Data_Œ∏Œ®[1:NiZ, :]
               end
         
               if HeaderSmap
                  Header_Œ∏Œ® = ["ThetaS_Vg[mm3_mm3]";"ThetaR_Vg[mm3_mm3]";"N_Vg[-]";"Hvg_Vg[mm]"; "Ks_Vg[mm_s1]"]
               else
                  Header_Œ∏Œ® = Select_Œ∏Œ®
               end

               Header =  append!(Header, Header_Œ∏Œ®)
            else
               @warn("\n \n WARNING Smap_Output: model simulation not found: $HydroModel_Œ∏Œ® \n")
            end # if isfile(Path_Œ∏Œ®)
         end # üéè_VanGenuchten


         # HydroModel_Œ∏Œ® == "VangenuchtenJules"
         if üéè_VanGenuchtenJules # <>=<>=<>=<>=<>=<>=<>=<>=<>=<>
            HydroModel_Œ∏Œ® = "VangenuchtenJules"

            Path_Œ∏Œ® =  path.tableSoilwater.Path_Soilwater_Table *  "_" * string(HydroModel_Œ∏Œ®) *  "_" * "Table_Smap_Œ∏Œ®K.csv"

            if isfile(Path_Œ∏Œ®)
               Select_Œ∏Œ® = ["Œ∏s";"Œ∏r";"N";"Œ®vg"; "Ks"]
               
               Data_Œ∏Œ® = Tables.matrix(CSV.File(Path_Œ∏Œ®, select=Select_Œ∏Œ®))
                  
               try
                  Data = hcat(Data[1:NiZ, :], Data_Œ∏Œ®[1:NiZ, :])
               catch
                  Data = Data_Œ∏Œ®[1:NiZ, :]
               end
         
               if HeaderSmap
                  Header_Œ∏Œ® = ["ThetaS_VgJules[mm3_mm3]";"ThetaR_VgJules[mm3_mm3]";"n_VgJules[-]";"Hvg_VgJules[mm]"; "Ks_VgJules[mm_s1]"]
               else
                  Header_Œ∏Œ® = Select_Œ∏Œ®
               end

               Header =  append!(Header, Header_Œ∏Œ®)
            else
               @warn("\n \n WARNING Smap_Output: model simulation not found: $HydroModel_Œ∏Œ® \n")
            end # if isfile(Path_Œ∏Œ®)
         end # üéè_VanGenuchten


         # HydroModel_Œ∏Œ® == "Kosugi"
         if üéè_Kosugi # <>=<>=<>=<>=<>=<>=<>=<>=<>=<>
            HydroModel_Œ∏Œ® = "Kosugi"

            Path_Œ∏Œ® =  path.tableSoilwater.Path_Soilwater_Table *  "_" * string(HydroModel_Œ∏Œ®) *  "_" * "Table_Smap_Œ∏Œ®K.csv"

            if isfile(Path_Œ∏Œ®)
               Select_Œ∏Œ® =["Œ∏s";"Œ∏r";"Ks";"Œ®m";"œÉ";"Œ∏sMacMat_∆û";"œÉMac";"Œ®mMac"; "Œ∏sMacMat";"Œ¶"]
                   
               Data_Œ∏Œ® = Tables.matrix(CSV.File(Path_Œ∏Œ®, select=Select_Œ∏Œ®))
                  
               try
                  Data = hcat(Data[1:NiZ, :], Data_Œ∏Œ®[1:NiZ, :])
               catch
                  Data = Data_Œ∏Œ®[1:NiZ, :]
               end
         
               if HeaderSmap
                  Header_Œ∏Œ® = ["ThetaS_Kg[mm3_mm3]";"ThetaR_Kg[mm3_mm3]";"Ks_Kg[mm_s1]";"Hm_Kg[mm]";"Sigma_Kg";"ThetaSMacMatNorm_Kg[mm3_mm3]";"SigmaMac_Kg";"HmMac_Kg[mm]";"ThetaSMacMat_Kg[mm3_mm3]";"TotalPorosity[mm3_mm3]"]
               else
                  Header_Œ∏Œ® = Select_Œ∏Œ®
               end
               Header =  append!(Header, Header_Œ∏Œ®)
            else
               @warn("\n \n WARNING Smap_Output: model simulation not found: $HydroModel_Œ∏Œ® \n")
            end # if isfile(Path_Œ∏Œ®)

         end # üéè_Kosugi


        

      # CREATING TABLES Œ∏(œà) & TABLES K(œà)==========
         Path_Select_Œ∏Œ® = path.tableSoilwater.Path_Soilwater_Table *  "_Kosugi_Table_Smap_Select_Œ∏Œ®.csv"
         Path_Select_KŒ® = path.tableSoilwater.Path_Soilwater_Table *  "_Kosugi_Table_Smap_Select_KŒ®.csv"
         
         if option‚Çò.HydroModel‚ç∞ == "Kosugi"
            # Creating Table Œ∏(Œ®)
               N_Œ® = length(param.smap.Œ®_Table[:])
               Œ∏‚ÇÇ  = fill(0.0::Float64, (NiZ, N_Œ®))

               for iZ=1:NiZ
                  for iŒ® =1:N_Œ®
                     Œ®‚ÇÇ         = param.smap.Œ®_Table[iŒ®]
                     Œ∏‚ÇÇ[iZ, iŒ®] = wrc.Œ®_2_Œ∏(option‚Çò, Œ®‚ÇÇ, iZ, hydro)
                  end # iŒ®
               end # iZ
            
               Header_Œ∏Œ® = "ThetaH_" .* string.(Int64.(param.smap.Œ®_Table)) .* "_mm"  
               CSV.write(Path_Select_Œ∏Œ®, Tables.table( Œ∏‚ÇÇ[1:NiZ, :]), writeheader=true, header=Header_Œ∏Œ®, bom=!(HeaderSmap))

            # Creating Table K(Œ®) ======
               N_Œ® = length(param.hydro.K_Table[:])
               K‚ÇÇ  = fill(0.0::Float64, (NiZ, N_Œ®))

               for iZ=1:NiZ
                  for iŒ® =1:N_Œ®
                     Œ®‚ÇÇ = param.hydro.K_Table[iŒ®]
                     K‚ÇÇ[iZ, iŒ®] = kunsat.KUNSAT_Œ∏Œ®Se(option‚Çò, Œ®‚ÇÇ, iZ, hydro)
                  end # iŒ®
               end # iZ

               Header_KŒ® = "KunsatH_" .* string.(Int64.(param.hydro.K_Table)) .* "_mm s1" 

               CSV.write(Path_Select_KŒ®, Tables.table( K‚ÇÇ[1:NiZ, :]), writeheader=true, header=Header_KŒ®, bom=!(HeaderSmap))
         end # CREATING TABLES Œ∏(œà) & TABLES K(œà)


      # FIELD CAPACITY, PERMENANT WILTING POINT, AVAILABLE WATER CONTENT 


      # WRITTING DATA TO Table_Smap <>=<>=<>=<>=<>=<>=<>=<>=<>=<>
         if (üéè_Kosugi_Table_Œ∏œà || üéè_Fc_Pwp_Paw) && isfile(Path_Select_Œ∏Œ®)
               Header_Œ∏Œ® = "ThetaH_" .* string.(Int64.(param.smap.Œ®_Table .* cst.Mm_2_kPa)) .* "_kPa" 

               Œ∏‚ÇÇ = Tables.matrix(CSV.File(Path_Select_Œ∏Œ®))

               Data = [Data[1:NiZ, :] Œ∏‚ÇÇ[1:NiZ, :]]

               Header =  append!(Header, Header_Œ∏Œ®)

					if üéè_Fc_Pwp_Paw
                  Œ∏_0kPa        = zeros(NiZ)
                  Œ∏_5kPa        = zeros(NiZ)
                  Œ∏_10kPa       = zeros(NiZ)
                  Œ∏_1500kPa     = zeros(NiZ)
                  Paw           = zeros(NiZ)
                  Macroporosity = zeros(NiZ)
						AirfilledMacroporosity = zeros(NiZ)

						for iZ=1:NiZ
                     iŒ∏_0kPa           = findfirst(isequal(0.0), param.smap.Œ®_Table)
                     Œ∏_0kPa[iZ]        = Œ∏‚ÇÇ[iZ, iŒ∏_0kPa]

							iŒ∏_5kPa           = findfirst(isequal(500.0), param.smap.Œ®_Table)
                     Œ∏_5kPa[iZ]        = Œ∏‚ÇÇ[iZ, iŒ∏_5kPa]

                     iŒ∏_10kPa          = findfirst(isequal(1000.0), param.smap.Œ®_Table)
                     Œ∏_10kPa[iZ]       = Œ∏‚ÇÇ[iZ, iŒ∏_10kPa]

                     iŒ∏_1500kPa        = findfirst(isequal(150000.0), param.smap.Œ®_Table)
                     Œ∏_1500kPa[iZ]     = Œ∏‚ÇÇ[iZ, iŒ∏_1500kPa]

                     Paw[iZ]                = Œ∏_10kPa[iZ] - Œ∏_1500kPa[iZ]
                     Macroporosity[iZ]      = Œ∏_0kPa[iZ] - Œ∏_5kPa[iZ]
                     AirfilledMacroporosity[iZ] = Œ∏_0kPa[iZ] - Œ∏_10kPa[iZ]
						end

						Header_Pc_Pwp_Paw = ["Fc", "Pwp", "Paw", "Macroporosity", "AirfilledMacroporosity"]
						Header =  append!(Header, Header_Pc_Pwp_Paw)

						Data = [Data[1:NiZ, :] Œ∏_10kPa[1:NiZ] Œ∏_1500kPa[1:NiZ] Paw[1:NiZ] Macroporosity[1:NiZ] AirfilledMacroporosity[1:NiZ]]
					end
         end # üéè_Kosugi

         if üéè_Kosugi_Table_Kœà  && isfile(Path_Select_KŒ®)
            K‚ÇÇ= Tables.matrix(CSV.File(Path_Select_KŒ®))

            Data = [Data[1:NiZ, :] K‚ÇÇ[1:NiZ, :]]
      
            Header_KŒ® = "KunsatH_" .* string.(round.(param.hydro.K_Table .* cst.Mm_2_kPa, digits=2)) .* "kPa_[mm s-1]"            

            Header =  append!(Header, Header_KŒ®)
         end # üéè_Kosugi


      # COMBINING OUTPUTS =====================================================  
         CSV.write(path.tableSmap.Table_Smap, Tables.table( [IdSelect[1:NiZ] smap.Soilname[1:NiZ] smap.Smap_Depth[1:NiZ] smap.IsTopsoil[1:NiZ] smap.RockFragment[1:NiZ] smap.Smap_MaxRootingDepth[1:NiZ] smap.Smap_PermeabilityClass[1:NiZ] smap.Smap_SmapFH[1:NiZ] smap.Smap_ImpermClass[1:NiZ] Data[1:NiZ,:]]), writeheader=true, header=Header, bom=!(HeaderSmap))

      return nothing
      end  # function:  smap
	# ............................................................
  
end  # module: tableSmap
# ............................................................